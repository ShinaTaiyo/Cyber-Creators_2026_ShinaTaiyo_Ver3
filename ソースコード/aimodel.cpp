//====================================================================================================================
//
//９月７日：AI用のモデルを作る[aimodel.cpp]
//Author:ShinaTaiyo
//
//====================================================================================================================

//===========================================================
//インクルード
//===========================================================
#include "manager.h"
#include "renderer.h"
#include "aimodel.h"
#include "objectXInfo.h"
//====================================================================================================================

//===========================================================
//静的メンバ
//===========================================================
const string CAIModel::m_aAIMODEL_FILENAME[static_cast<int>(CAIModel::AIMODELTYPE::MAX)] =
{
	"data\\MODEL\\AIModel\\MoveAiPoint_000.x"
};//モデルファイル名

//===========================================================
//コンストラクタ
//===========================================================
CAIModel::CAIModel(int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) :CObjectX(nPri,bUseintPri,type,ObjType),m_Type(CAIModel::AIMODELTYPE::MOVEPOINT)
{

}
//====================================================================================================================

//===========================================================
//デストラクタ
//===========================================================
CAIModel::~CAIModel()
{
}
//====================================================================================================================

//===========================================================
//初期化処理
//===========================================================
HRESULT CAIModel::Init()
{
	CObjectX::Init();//初期化処理
	return S_OK;
}
//====================================================================================================================

//===========================================================
//終了処理
//===========================================================	
void CAIModel::Uninit()
{
	CObjectX::Uninit();//終了処理
}
//====================================================================================================================

//===========================================================
//更新処理
//===========================================================	
void CAIModel::Update()
{
	CObjectX::Update();//更新処理
}
//====================================================================================================================

//===========================================================
//描画処理（オブジェクトのDrawで呼ばないために処理はなし)
//===========================================================	
void CAIModel::Draw()
{
	//CObjectX::Draw();
}
//====================================================================================================================

//===========================================================
//描画処理（オブジェクトのDrawで呼びたくないので別枠）
//===========================================================	
void CAIModel::ExtraDraw()
{
	CObjectX::Draw();//描画処理
}
//====================================================================================================================

//===========================================================
//死亡フラグ設定処理
//===========================================================	
void CAIModel::SetDeath()
{
	CObject::SetDeath();//死亡フラグ設定処理
}
//====================================================================================================================

CAIModel* CAIModel::Create(AIMODELTYPE type, D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 Scale, D3DXMATRIX* mtxWorld)
{
	CAIModel* pAiModel = DBG_NEW CAIModel;   //敵を生成
	bool bSuccess = pAiModel->CObject::GetCreateSuccess();
	int nIdx = 0;//モデルのインデックス
	pAiModel->Init();                                                               //初期化処理
	pAiModel->SetUseDeath(false);                                                   //死亡フラグを発動するかどうかを設定する
	pAiModel->m_Type = type;                                                        //敵の種類
	pAiModel->GetPosInfo().SetPos(pos);                                             //オブジェクト２Ｄの位置を設定
	pAiModel->GetPosInfo().SetPosOld(pos);                                          //1f前の位置を設定
	pAiModel->GetDrawInfo().SetUseDraw(true);                                       //描画をする
	pAiModel->GetDrawInfo().SetUseShadow(true);                                     //影を描画する
	pAiModel->GetPosInfo().SetSupportPos(pos);                                      //設置位置
	pAiModel->GetSizeInfo().SetScale(Scale);                                        //オブジェクトの拡大率
	pAiModel->GetSizeInfo().SetFormarScale(Scale);                                  //元の拡大率を設定する
	pAiModel->GetDrawInfo().SetMtxParent(mtxWorld);                                 //親マトリックスを設定する

	//モデル情報を割り当て、情報を取得する
	nIdx = CManager::GetObjectXInfo()->Regist(m_aAIMODEL_FILENAME[static_cast<int>(type)]);
	pAiModel->CObjectX::BindObjectXInfo(CManager::GetObjectXInfo()->GetMesh(nIdx),
		CManager::GetObjectXInfo()->GetBuffMat(nIdx),
		CManager::GetObjectXInfo()->GetdwNumMat(nIdx),
		CManager::GetObjectXInfo()->GetTexture(nIdx),
		CManager::GetObjectXInfo()->GetColorValue(nIdx));                           

	pAiModel->SetSize();                                                            //Xオブジェクトのサイズを設定する
	return pAiModel;
}
//====================================================================================================================