//================================================================================================================
//
//１１月１９日：3D背景を描画する[bg3d.cpp]
//Author:ShinaTaiyo
//
//================================================================================================================

//==============================================================
//インクルード
//==============================================================
#include "bg3d.h"
#include "texture.h"
#include "manager.h"
#include "objectXInfo.h"
#include "renderer.h"
//================================================================================================================

//==============================================================
//静的メンバ宣言
//==============================================================
const string CBg3D::s_BG3D_FILENAME[static_cast<int>(CBg3D::BG3DTYPE::MAX)] =
{
	"data\\MODEL\\Bg3D\\Sky_000.x"
};
//================================================================================================================

//==============================================================
//コンストラクタ
//==============================================================
CBg3D::CBg3D(int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) : CObjectX(nPri,bUseintPri,type,ObjType)
{

}
//================================================================================================================

//==============================================================
//デストラクタ
//==============================================================
CBg3D::~CBg3D()
{

}
//================================================================================================================

//==============================================================
//初期化処理
//==============================================================
HRESULT CBg3D::Init()
{
	CObjectX::Init();//初期化処理
	return S_OK;
}
//================================================================================================================

//==============================================================
//終了処理
//==============================================================
void CBg3D::Uninit()
{
	CObjectX::Uninit();
}
//================================================================================================================

//==============================================================
//更新処理
//==============================================================
void CBg3D::Update()
{
	D3DXVECTOR3& Rot = GetRotInfo().GetRot();

	GetRotInfo().SetRot(Rot + D3DXVECTOR3(0.0f, 0.001f, 0.0f));

	CObjectX::Update();
}
//================================================================================================================

//==============================================================
//描画処理
//==============================================================
void CBg3D::Draw()
{
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	//ライトを無効にする
	pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	//両面を描画する
	pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

	CObjectX::Draw();

	//ライトを有効にする
	pDevice->SetRenderState(D3DRS_LIGHTING, TRUE);

	//片面だけ描画する
	pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);
}
//================================================================================================================

//==============================================================
//死亡フラグ設定処理
//==============================================================
void CBg3D::SetDeath()
{
	CObject::SetDeath();
}
//================================================================================================================

//==============================================================
//死亡フラグ設定処理
//==============================================================
CBg3D* CBg3D::Create(BG3DTYPE type, D3DXVECTOR3 Pos, D3DXVECTOR3 Rot, D3DXVECTOR3 Scale)
{
	CTexture* pTexture = CManager::GetTexture();
	CBg3D* pBg3D = DBG_NEW CBg3D();

	pBg3D->Init();
	pBg3D->SetBg3DType(type);
	pBg3D->GetPosInfo().SetPos(Pos);
	pBg3D->GetRotInfo().SetRot(Rot);
	pBg3D->GetSizeInfo().SetScale(Scale);
	pBg3D->SetUseDeath(true);
	pBg3D->GetDrawInfo().SetUseShadow(false);
	//モデル情報設定
	int nIdx = CManager::GetObjectXInfo()->Regist(s_BG3D_FILENAME[static_cast<int>(type)]);
	//モデル情報を割り当てる
	pBg3D->BindObjectXInfo(CManager::GetObjectXInfo()->GetMesh(nIdx),
		CManager::GetObjectXInfo()->GetBuffMat(nIdx),
		CManager::GetObjectXInfo()->GetdwNumMat(nIdx),
		CManager::GetObjectXInfo()->GetTexture(nIdx),
		CManager::GetObjectXInfo()->GetColorValue(nIdx));

	return pBg3D;
}
//================================================================================================================