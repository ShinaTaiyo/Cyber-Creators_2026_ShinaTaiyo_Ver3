//======================================================================================================================================
//
//９月１５日：ボス登場演出を作る[eventmanager.cpp]
//Author:ShinaTaiyo
//
//======================================================================================================================================

//=====================================================================
//インクルード
//=====================================================================
#include "eventmanager.h"
#include "camera.h"
#include "renderer.h"
#include "object.h"
#include "sound.h"
#include "fade.h"
#include "debugtext.h"
#include "manager.h"
#include "calculation.h"
#include "particle2d.h"
#include "ui.h"
//======================================================================================================================================

//=====================================================================
//静的メンバ宣言
//=====================================================================
int CEventManager::s_nNumEventManager = 0;//イベントマネージャーの総数をカウントする

//=====================================================================
//コンストラクタ
//=====================================================================
CEventManager::CEventManager(CNowEvent* pNowEvent, int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) : CObject(nPri,bUseintPri,type,ObjType),m_pNowEvent(pNowEvent), m_EventProgressInfo({})
{
	s_nNumEventManager++;
   
}
//======================================================================================================================================

//=====================================================================
//デストラクタ
//=====================================================================
CEventManager::~CEventManager()
{
	s_nNumEventManager--;
}
//======================================================================================================================================

//=====================================================================
//初期化処理
//=====================================================================
HRESULT CEventManager::Init()
{
	CObject::Init();
	return S_OK;
}
//======================================================================================================================================

//=====================================================================
//終了処理
//=====================================================================
void CEventManager::Uninit()
{
	CObject::Uninit();
}
//======================================================================================================================================

//=====================================================================
//更新処理
//=====================================================================
void CEventManager::Update()
{
	//常にイベント時間をカウントする
	m_EventProgressInfo.nCntEventTime++;//イベント時間をカウントする

	if (m_pNowEvent != nullptr)
	{
		m_pNowEvent->Process(this);//それぞれのイベントの処理を呼ぶ
	}
	CObject::Update();
}
//======================================================================================================================================

//=====================================================================
//描画処理
//=====================================================================
void CEventManager::Draw()
{
	CObject::Draw();
}
//======================================================================================================================================

//=====================================================================
//死亡フラグ設定処理
//=====================================================================
void CEventManager::SetDeath()
{
	if (GetUseDeath() == true)
	{
		if (m_pNowEvent != nullptr)
		{
			delete m_pNowEvent;
			m_pNowEvent = nullptr;
		}
	}

	CObject::SetDeath();
}
//======================================================================================================================================


//=====================================================================
//イベント変更処理
//=====================================================================
void CEventManager::ChengeEvent(CNowEvent* pNowEvent)
{
	if (m_pNowEvent != nullptr)
	{
		//破棄
		delete m_pNowEvent;
		m_pNowEvent = nullptr;

		//生成
		m_pNowEvent = pNowEvent;
	}
}
//======================================================================================================================================

//=====================================================================
//イベントの生成
//=====================================================================
CEventManager* CEventManager::Create(CNowEvent* pNowEvent)
{
	CEventManager* pEventManager = DBG_NEW CEventManager(pNowEvent);

	pEventManager->Init();//初期化処理
	pEventManager->SetUseDeath(true);

	return pEventManager;
}
//======================================================================================================================================


//=====================================================================
//イベントを終わらせるフラグ
//=====================================================================
void CEventManager::SetEndEvent(bool bEnd)
{
	if (bEnd == true)
	{
		SetDeath();//死亡フラグを設定する
	}
}
//======================================================================================================================================

//=====================================================================
//イベントを次のパターンへ進める
//=====================================================================
void CEventManager::EventProgressInfo::NextPattern()
{
	nCntEventTime = 0;
	nEventPattern++;
}
//======================================================================================================================================

//=====================================================================
//イベントパターンをリセットする
//=====================================================================
void CEventManager::EventProgressInfo::ResetPattern()
{
	nCntEventTime = 0;
	nEventPattern = 0;
	bEventProgress = false;
	EventType = EVENTTYPE::NONE;
}
//======================================================================================================================================

//*********************************************************************
//*フェーズ移行イベントステート
//*********************************************************************
int CNowEvent_NextPhase::s_nNumNextPhaseEvent = 0;//次のフェーズに移行するイベントの総数をカウントする

//=====================================================================
//コンストラクタ
//=====================================================================
CNowEvent_NextPhase::CNowEvent_NextPhase(CUi* pUI, int nPhaseNum, float fValueWidth, float fValueHeight) : m_PhaseText(nullptr)
{
	m_PhaseText = pUI;
	m_PhaseText->SetNumericState(nPhaseNum, fValueWidth, fValueHeight);//数字状態にする
	m_PhaseText->SetUseDeath(true);//死亡フラグをオフにする

	s_nNumNextPhaseEvent++;
}
//======================================================================================================================================

//=====================================================================
//デストラクタ
//=====================================================================
CNowEvent_NextPhase::~CNowEvent_NextPhase()
{
	s_nNumNextPhaseEvent--;
	//フェーズの文字を破棄
	if (m_PhaseText != nullptr)
	{
		m_PhaseText->SetUseDeath(true);
		m_PhaseText->SetDeath();
		m_PhaseText = nullptr;
	}
}
//======================================================================================================================================

//=====================================================================
//処理
//=====================================================================
void CNowEvent_NextPhase::Process(CEventManager* pEventManager)
{
    CEventManager::EventProgressInfo& eventProgressInfo = pEventManager->GetEventProgressInfo();

	CManager::GetDebugText()->PrintDebugText("UIの死亡フラグ：%d\n",m_PhaseText->GetUseDeath());
	switch (eventProgressInfo.nEventPattern)
	{
	case 0:
		if (m_PhaseText->GetPos().x >= SCREEN_WIDTH / 2 - 20.0f &&
			m_PhaseText->GetPos().x <= SCREEN_WIDTH / 2 + 20.0f)
		{
			m_PhaseText->SetMove(m_PhaseText->GetMove() * 0.1f);//速度を半減する
			eventProgressInfo.NextPattern();//パターンを次に進める
		}
		break;
	case 1:
		if (eventProgressInfo.nCntEventTime == 120)
		{
			m_PhaseText->SetMove(m_PhaseText->GetMove() * 10.0f);//速度を戻す
			eventProgressInfo.NextPattern();//パターンを次に進める
		}
		break;
	case 2:
		if (m_PhaseText->GetPos().x + m_PhaseText->GetWidth() / 2 <= 0.0f)
		{//文字テクスチャが完全にいなくなったら
			eventProgressInfo.ResetPattern();//パターンをリセット
			pEventManager->ChengeEvent(DBG_NEW CNowEvent());
			pEventManager->SetEndEvent(true);//イベントを終了させる
		}
		break;
	default:
		break;
	}
}
//======================================================================================================================================

//*********************************************************************
//*チュートリアルイベント
//*********************************************************************

//=====================================================================
//コンストラクタ
//=====================================================================
CNowEvent_Tutorial::CNowEvent_Tutorial()
{

}
//======================================================================================================================================

//=====================================================================
//デストラクタ
//=====================================================================
CNowEvent_Tutorial::~CNowEvent_Tutorial()
{

}
//======================================================================================================================================

//=====================================================================
//処理
//=====================================================================
void CNowEvent_Tutorial::Process(CEventManager* pEventManager)
{

}
//======================================================================================================================================