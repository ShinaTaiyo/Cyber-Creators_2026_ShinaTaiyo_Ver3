//============================================================================================================
//
//１０月２８日：狙った方向に弾を発射する[ui3d.cpp]
//Author:ShinaTaiyo
//
//============================================================================================================

//=======================================================
//インクルード
//=======================================================
#include "ui3d.h"
#include "manager.h"
#include "texture.h"
//============================================================================================================

//=======================================================
//前方宣言
//=======================================================
const string CUi3D::m_UI3D_FILENAME[static_cast<int>(CUi3D::UI3DTYPE::MAX)] =
{
	"data\\TEXTURE\\UI3D\\Target_000.png",
};//ファイル名

//=======================================================
//コンストラクタ
//=======================================================
CUi3D::CUi3D(int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) : CBillboard(nPri,bUseintPri,type,ObjType),m_Type(UI3DTYPE::LOCKON)
{

}
//============================================================================================================

//=======================================================
//デストラクタ
//=======================================================
CUi3D::~CUi3D()
{

}
//============================================================================================================

//=======================================================
//初期化処理
//=======================================================
HRESULT CUi3D::Init(void)
{
	CBillboard::Init();//ビルボードの初期化
	return S_OK;
}
//============================================================================================================

//=======================================================
//終了処理
//=======================================================
void CUi3D::Uninit(void)
{
	CBillboard::Uninit();//ビルボードの終了処理
}
//============================================================================================================

//=======================================================
//更新処理
//=======================================================
void CUi3D::Update(void)
{
	CBillboard::Update();//ビルボードの更新処理
}
//============================================================================================================

//=======================================================
//描画処理
//=======================================================
void CUi3D::Draw(void)
{
	CBillboard::Draw();//ビルボードの描画処理
}
//============================================================================================================

//=======================================================
//死亡フラグ設定処理
//=======================================================
void CUi3D::SetDeath()
{
	CBillboard::SetDeath();//ビルボードの死亡フラグ設定処理
}
//============================================================================================================

//=======================================================
//生成処理
//=======================================================
CUi3D* CUi3D::Create(UI3DTYPE type, D3DXVECTOR3 Pos, D3DXVECTOR3 Move, int nLife, float fWidth, float fHeight)
{
	CUi3D* pUi3D = DBG_NEW CUi3D;                                                      //3DUIの生成
	CTexture* pTexture = CManager::GetTexture();                                       //テクスチャ情報へのポインタ
	 
	pUi3D->Init();                                                                     //初期化処理
	pUi3D->SetType(CObject::TYPE::UI3D);                                               //オブジェクトタイプを設定
	pUi3D->SetMove(Move);                                                              //移動量を設定
	pUi3D->SetTextureIndex(pTexture->Regist(m_UI3D_FILENAME[static_cast<int>(type)])); //テクスチャを登録し、テクスチャ番号を設定
	pUi3D->bindTexture(pTexture->GetAddress(pUi3D->GetTextureIndex()));                //テクスチャを割り当てる

	pUi3D->SetLife(nLife);                                                             //体力
	pUi3D->SetMaxLife(nLife);				                                           //最大体力
	pUi3D->SetPos(Pos);						                                           //位置
	pUi3D->SetSupportPos(Pos);				                                           //召喚位置
											                                           
	pUi3D->SetSize(fWidth,fHeight);			                                           //サイズを設定
	pUi3D->SetFormarSize(fWidth, fHeight);	                                           //元のサイズを設定

	pUi3D->SetAnimInfo(1, 1, D3DXCOLOR(1.0f,1.0f,1.0f,1.0f), false);                   //アニメーション情報を設定


	return pUi3D;
}
//============================================================================================================
