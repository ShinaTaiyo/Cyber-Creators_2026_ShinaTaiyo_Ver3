//====================================================================================================================
//
// ２０２５年５月１８日：コードを綺麗にする[aimodel.h]
// Author:ShinaTaiyo
//
//====================================================================================================================

//********************************************************************************************************************
// ２重インクルード防止
//********************************************************************************************************************
#ifndef _AIMODEL_H_  
#define _AIMODEL_H_

//********************************************************************************************************************
// インクルード
//********************************************************************************************************************
#include "main.h"    // メイン
#include "objectX.h" // オブジェクトX

//********************************************************************************************************************
// AIモデルクラス
//********************************************************************************************************************
class CAIModel : public CObjectX
{
public:
	// === 列挙型 ===
	enum class AIMODELTYPE // AIモデルタイプ
	{
		MOVEPOINT = 0,
		MAX
	};

	// === 特殊関数 ===

	// コンストラクタ
	CAIModel(
	 int nPri = 0, // int型プライオリティ
     bool bUseintPri = false, // int型プライオリティを使用するかどうか（自分で描画順を決めるかどうか)
     CObject::TYPE type = CObject::TYPE::AIMODEL, // タイプ
     CObject::OBJECTTYPE ObjType = CObject::OBJECTTYPE::OBJECTTYPE_X // オブジェクトタイプ
	);
	~CAIModel(); // デストラクタ

	// === ライフサイクルメンバ関数 ===

	HRESULT Init() override;  // 初期化処理
	void Uninit() override;   // 終了処理
	void Update() override;   // 更新処理
	void Draw() override;     // 描画処理
	void ExtraDraw();         // 描画処理
	void SetDeath() override; // 死亡フラグを設定

	// === 静的メンバ関数 ===
    
	// 生成処理
	static CAIModel* Create(
		AIMODELTYPE type,  // AIモデルタイプ
		D3DXVECTOR3 pos,   // 位置
		D3DXVECTOR3 rot,   // 向き
		D3DXVECTOR3 Scale, // 拡大率
		D3DXMATRIX * mtxWorld // 親マトリックスへのポインタ
	);
private:
	// === 静的メンバ変数 ===

	static const string m_aAIMODEL_FILENAME[static_cast<int>(AIMODELTYPE::MAX)]; // モデルファイル名

	// === メンバ変数 ===
	AIMODELTYPE m_Type; // AIモデルタイプ
};
//==============================================================================================================================================================

#endif
