//======================================================================================================================
//
// ２０２５年５月２５日：コードを綺麗にする[bg.cpp]
// Author:ShinaTaiyo
//
//======================================================================================================================

//*******************************************************************************************************************
// インクルード
//*******************************************************************************************************************

#include "bg.h"       // 背景
#include "main.h"     // メイン
#include "renderer.h" // レンダラー
#include "manager.h"  // マネージャー
#include "object2d.h" // オブジェクト2D
#include "object.h"   // オブジェクト
#include "texture.h"  // テクスチャ

//*******************************************************************************************************************
// 静的メンバ宣言
//*******************************************************************************************************************

// 背景のファイル名
const std::string CBg::m_apBGFILE_NAME[static_cast<int>(CBg::TYPE::MAX)] =
{
	"data\\TEXTURE\\UI\\Title_000.png",
	"data\\TEXTURE\\Bg\\Wall_000.jpg",
	"data\\TEXTURE\\Bg\\Result_BG.png"
};

//=====================================================================================================================
// 
// publicメンバ 
//
//=====================================================================================================================

//===================================================================================================================
// コンストラクタ
//===================================================================================================================
CBg::CBg(int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) : 
	CObject2D(nPri,bUseintPri,type,ObjType), 
	m_bUseTexMove(false),
	m_PosTex(D3DXVECTOR2(0.0f,0.0f)),
	m_MoveTex(D3DXVECTOR2(0.0f,0.0f)),
	m_Type(CBg::TYPE::TITLE),
	m_fPosTexU(0.0f),
	m_fRotationPower(0.0f)
{
	// 何もなし
}

//===================================================================================================================
// デストラクタ
//===================================================================================================================
CBg::~CBg()
{
	// 何もなし
}

//===================================================================================================================
// 初期化処理
//===================================================================================================================
HRESULT CBg::Init()
{
	CObject2D::Init(); // 2Dオブジェクト初期化
	return S_OK;
}

//===================================================================================================================
// 終了処理
//===================================================================================================================
void CBg::Uninit()
{
	CObject2D::Uninit(); // 2Dオブジェクト終了処理
}

//===================================================================================================================
// 更新処理
//===================================================================================================================
void CBg::Update()
{
	// === 処理 ===

	CObject2D::Update(); //オブジェクト2D更新処理

	// テクスチャ座標を移動させるかどうか
	if (m_bUseTexMove == true)
	{
		// === 変数 ===

		LPDIRECT3DVERTEXBUFFER9 pVtxBuff = GetVertexBuffer(); // 頂点バッファへのポインタ
		VERTEX_2D* pVtx; // 2D頂点情報へのポインタ

		// === 処理 ===

		// 頂点バッファをロックし、頂点データへのポインタを取得
		pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

		// テクスチャ座標の設定
		pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f) + m_PosTex;
		pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f) + m_PosTex;
		pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f) + m_PosTex;
		pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f) + m_PosTex;

		// テクスチャ座標を移動させる
		m_PosTex += m_MoveTex * GetDeltaTimeScale(this);

		//頂点バッファをアンロックする
		pVtxBuff->Unlock();
	}
}

//===================================================================================================================
// 描画処理
//===================================================================================================================
void CBg::Draw()
{
	CObject2D::Draw(); // オブジェクト2D描画処理
}

//===================================================================================================================
// 死亡フラグ設定処理
//===================================================================================================================
void CBg::SetDeath()
{
	CObject2D::SetDeath(); // オブジェクト2D死亡フラグ設定処理
}

//===================================================================================================================
// 生成処理
//===================================================================================================================
void CBg::Create(TYPE type)
{
	// === 変数 ===

	CBg* pBg = DBG_NEW CBg; // 背景を生成
	CTexture* pTextureClass = CManager::GetTexture(); // テクスチャクラスを取得

	// === 処理 ===

	// 背景へのポインタが存在しないなら例外処理
	if (pBg == nullptr)
	{
		assert(false);
	}

	pBg->Init(); // 初期化処理
	pBg->SetUseDeath(true); // 死亡フラグを発動するかどうかを設定する
	pBg->m_Type = type;     // 背景の種類
	pBg->CObject::SetType(CObject::TYPE::BG); // オブジェクトの種類を決める
	pBg->CObject2D::SetAnimInfo(1, 1, false); // ポリゴンとテクスチャ情報を設定
	pBg->SetColor(D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), false, 1.0f); // 色合いを設定
	pBg->SetWidth(SCREEN_WIDTH / 2);      // ポリゴンの横幅を設定
	pBg->SetMaxWidth(SCREEN_WIDTH / 2);   // ポリゴンの最大横幅を設定
	pBg->SetHeight(SCREEN_HEIGHT / 2);    // ポリゴンの高さを設定
	pBg->SetMaxHeight(SCREEN_HEIGHT / 2); // ポリゴンの最大高さを設定
	pBg->SetPolygonType(CObject2D::POLYGONTYPE::NORMAL); // ポリゴンの種類を設定
	pBg->SetTextureIndex(pTextureClass->Regist(m_apBGFILE_NAME[static_cast<int>(type)])); // テクスチャ番号の設定
	pBg->CObject2D::BindTexture(pTextureClass->GetAddress(pBg->GetTextureIndex())); // テクスチャ情報の設定
	pBg->CObject2D::SetPos(D3DXVECTOR3(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2, 0.0f)); // ポリゴンとテクスチャ情報を設定
}

//===================================================================================================================
// 背景の種類を取得
//===================================================================================================================
const CBg::TYPE& CBg::GetType()
{
	return m_Type;
}

//===================================================================================================================
// 背景の種類を設定
//===================================================================================================================
void CBg::SetType(TYPE type)
{
	m_Type = type;
}

//===================================================================================================================
// 回転速度を設定
//===================================================================================================================
void CBg::SetRotationPower(float fPower)
{
	m_fRotationPower = fPower;
}

//===================================================================================================================
// 回転速度を取得
//===================================================================================================================
float& CBg::GetRotationPower()
{
	return m_fRotationPower;
}

//===================================================================================================================
// テクスチャを移動させるかどうか設定
//===================================================================================================================
void CBg::SetUseTexMove(bool bUse, D3DXVECTOR2 Pos, D3DXVECTOR2 Move)
{
	m_bUseTexMove = bUse; // 使用するかどうか
	m_PosTex = Pos;   // テクスチャ座標 
	m_MoveTex = Move; // テクスチャ移動量
}

//===================================================================================================================
// テクスチャ座標を設定
//===================================================================================================================
void CBg::SetPosTex(D3DXVECTOR2 Pos)
{
	m_PosTex = Pos;
}

//===================================================================================================================
// テクスチャ移動量を設定
//===================================================================================================================
void CBg::SetMoveTex(D3DXVECTOR2 Move)
{
	m_MoveTex = Move;
}
