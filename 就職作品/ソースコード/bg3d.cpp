//===================================================================================================================
//
// ２０２５年５月２５日：コードを綺麗にする[bg3d.cpp]
// Author:ShinaTaiyo
//
//===================================================================================================================

//*******************************************************************************************************************
// インクルード
//*******************************************************************************************************************

#include "bg3d.h"        // 3D背景
#include "texture.h"     // テクスチャ
#include "manager.h"     // マネージャー
#include "objectXInfo.h" // オブジェクトX情報
#include "renderer.h"    // レンダラー

//*******************************************************************************************************************
// 静的メンバ宣言
//*******************************************************************************************************************

// モデルのパス
const string CBg3D::s_BG3D_FILENAME[static_cast<int>(CBg3D::TYPE::MAX)] =
{
	"data\\MODEL\\Bg3D\\Sky_000.x"
};

//===================================================================================================================
// 
// publicメンバ 
//
//===================================================================================================================

//===================================================================================================================
// コンストラクタ
//===================================================================================================================
CBg3D::CBg3D(int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) :
	CObjectX(nPri,bUseintPri,type,ObjType),
	m_Type(TYPE::SKY)
{
	// 何もなし
}

//===================================================================================================================
// デストラクタ
//===================================================================================================================
CBg3D::~CBg3D()
{
	// 何もなし
}

//===================================================================================================================
// 初期化処理
//===================================================================================================================
HRESULT CBg3D::Init()
{
	CObjectX::Init(); // オブジェクトX初期化処理
	return S_OK;
}

//===================================================================================================================
// 終了処理
//===================================================================================================================
void CBg3D::Uninit()
{
	CObjectX::Uninit(); //オブジェクトX終了処理
}

//===================================================================================================================
// 更新処理
//===================================================================================================================
void CBg3D::Update()
{
	// === 変数 ===

	const D3DXVECTOR3& Rot = GetRotInfo().GetRot(); // 向きを取得する

	// === 処理 ===

	GetRotInfo().SetRot(Rot + D3DXVECTOR3(0.0f, 0.001f, 0.0f)); // 向きを設定する（少しずつ背景を回す)

	CObjectX::Update(); // オブジェクトXの更新処理
}

//===================================================================================================================
// 描画処理
//===================================================================================================================
void CBg3D::Draw()
{
	// === 変数 ===

	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice(); // デバイスの取得

	// === 処理 ===

	//ライトを無効にする
	pDevice->SetRenderState(D3DRS_LIGHTING, FALSE);

	//両面を描画する
	pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_NONE);

	CObjectX::Draw();//オブジェクトXの描画処理

	//ライトを有効にする
	pDevice->SetRenderState(D3DRS_LIGHTING, TRUE);

	//片面だけ描画する
	pDevice->SetRenderState(D3DRS_CULLMODE, D3DCULL_CCW);
}

//===================================================================================================================
// 死亡フラグ設定処理
//===================================================================================================================
void CBg3D::SetDeath()
{
	CObjectX::SetDeath(); // オブジェクトXの死亡フラグ設定処理
}

//===================================================================================================================
// 3D背景種類設定
//===================================================================================================================
void CBg3D::SetType(TYPE type)
{
	m_Type = type;
}

//===================================================================================================================
// 3D背景種類取得
//===================================================================================================================
const CBg3D::TYPE& CBg3D::GetType() const
{
	return m_Type;
}

//===================================================================================================================
// 生成処理
//===================================================================================================================
CBg3D* CBg3D::Create(TYPE type, D3DXVECTOR3 Pos, D3DXVECTOR3 Rot, D3DXVECTOR3 Scale)
{
	// === 変数 ===

	CTexture* pTexture = CManager::GetTexture();  //テクスチャ情報へのポインタ
	CBg3D* pBg3D = DBG_NEW CBg3D();               //3D背景の生成

	// === 処理 ===

	pBg3D->Init(); // 初期化処理
	pBg3D->SetType(type); // 3D背景の種類を設定する
	pBg3D->GetPosInfo().SetPos(Pos);      // 位置を設定する
	pBg3D->GetRotInfo().SetRot(Rot);      // 向きを設定する
	pBg3D->GetSizeInfo().SetScale(Scale); // 拡大率を設定する
	pBg3D->GetDrawInfo().SetUseShadow(false); // 影を使用しない
	pBg3D->SetUseDeath(true); // 死亡フラグを使用するかどうかを設定する

	// === 変数 ===

	//モデル情報を設定しインデックスを取得
	int nIdx = CManager::GetObjectXInfo()->Regist(s_BG3D_FILENAME[static_cast<int>(type)]);

	// === 処理 ===

	// モデル情報を割り当てる
	pBg3D->BindObjectXInfo(CManager::GetObjectXInfo()->GetMesh(nIdx),
		CManager::GetObjectXInfo()->GetBuffMat(nIdx),
		CManager::GetObjectXInfo()->GetdwNumMat(nIdx),
		CManager::GetObjectXInfo()->GetTexture(nIdx),
		CManager::GetObjectXInfo()->GetColorValue(nIdx));

	return pBg3D;
}
//================================================================================================================