////============================================================================
//// 
//// ２０２５年４月２８日：コリジョン系クラス [bounding_box.cpp]
//// Author : 椎名太陽
//// 
////============================================================================
//
////****************************************************
//// インクルードファイル
////****************************************************
//#include "bounding_box.h"//元ヘッダ
//
////****************************************************
//// usingディレクティブ
////****************************************************
//using namespace useful;
//
////============================================================================
//// コンストラクタ
////============================================================================
//CCollisionInfo_BoundingBox::CCollisionInfo_BoundingBox() : 
//	m_Size(VEC3_INIT),
//	m_VtxMax(VEC3_INIT),
//	m_VtxMin(VEC3_INIT),
//	m_Move(VEC3_INIT),
//	m_bPushXOld(false),
//	m_bPushX(false)
//{
//	SetType(CCollisionInfo::TYPE::BOX); //判定タイプを「箱」に設定
//}
//
////============================================================================
//// デストラクタ
////============================================================================
//CCollisionInfo_BoundingBox::~CCollisionInfo_BoundingBox()
//{
//
//}
//
////============================================================================
//// 情報更新用（判定前に全ての情報を手動で更新）
////============================================================================
//void CCollisionInfo_BoundingBox::SetUpdateInfo(D3DXVECTOR3 Pos, D3DXVECTOR3 PosOld, D3DXVECTOR3 Move, D3DXVECTOR3 Size, D3DXVECTOR3 VtxMax, D3DXVECTOR3 VtxMin,
//	bool bIsLanding, bool bIsLandingOld, bool bPushX, bool bPushXOld)
//{
//	m_Size = Size;                                             // サイズ
//	m_Move = Move;                                             // 移動量
//	m_VtxMax = VtxMax;                                         // 最大頂点
//	m_VtxMin = VtxMin;                                         // 最小頂点
//	m_bPushX = bPushX;                                         // X軸に押し出されていたかどうか
//	m_bPushXOld = bPushXOld;                                   // X軸に押し出されていたかどうか
//	CCollisionInfo::SetUpdateInfo(Pos, PosOld,bIsLanding,bIsLandingOld);     // 基底クラスの情報更新
//}
//
////============================================================================
//// サイズ設定
////============================================================================
//void CCollisionInfo_BoundingBox::SetSize(const D3DXVECTOR3 Size)
//{
//	m_Size = Size;
//}
//
////============================================================================
//// サイズ取得
////============================================================================
//const D3DXVECTOR3& CCollisionInfo_BoundingBox::GetSize() const
//{
//	return m_Size;
//}
//
////============================================================================
//// 最大頂点設定
////============================================================================
//void CCollisionInfo_BoundingBox::SetVtxMax(D3DXVECTOR3 VtxMax)
//{
//	m_VtxMax = VtxMax;
//}
//
////============================================================================
//// 最大頂点取得
////============================================================================
//const D3DXVECTOR3& CCollisionInfo_BoundingBox::GetVtxMax() const
//{
//	return m_VtxMax;
//}
//
////============================================================================
//// 移動量設定
////============================================================================
//void CCollisionInfo_BoundingBox::SetMove(D3DXVECTOR3 Move)
//{
//	m_Move = Move;
//}
//
////============================================================================
//// 移動量取得
////============================================================================
//const D3DXVECTOR3& CCollisionInfo_BoundingBox::GetMove() const
//{
//	return m_Move;
//}
//
////============================================================================
//// 最小頂点設定
////============================================================================
//void CCollisionInfo_BoundingBox::SetVtxMin(D3DXVECTOR3 VtxMin)
//{
//	m_VtxMin = VtxMin;
//}
//
////============================================================================
//// 最小頂点取得
////============================================================================
//const D3DXVECTOR3& CCollisionInfo_BoundingBox::GetVtxMin() const
//{
//	return m_VtxMin;
//}
//
////============================================================================
//// X軸に押し出されていたかどうか設定
////============================================================================
//void CCollisionInfo_BoundingBox::SetPushX(bool bPush)
//{
//	m_bPushX = bPush;
//}
//
////============================================================================
//// X軸に押し出されていたかどうか取得
////============================================================================
//const bool& CCollisionInfo_BoundingBox::GetPushX() const
//{
//	return m_bPushX;
//}
//
////============================================================================
//// 1f前にX軸に押し出されていたかどうか設定
////============================================================================
//void CCollisionInfo_BoundingBox::SetPushXOld(bool bPush)
//{
//	m_bPushXOld = bPush;
//}
//
////============================================================================
//// 1f前にX軸に押し出されていたかどうか取得
////============================================================================
//const bool& CCollisionInfo_BoundingBox::GetPushXOld() const
//{
//	return m_bPushXOld;
//}
