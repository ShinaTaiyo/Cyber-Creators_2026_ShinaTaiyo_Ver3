//==================================================================================================================================
//
//６月１６日：ゲージを実装
//Author:ShinaTaiyo
//
//==================================================================================================================================

//===================================================================
//インクルード
//===================================================================
#include "gauge.h"
#include "texture.h"
//==================================================================================================================================

//===================================================================
//コンストラクタ
//===================================================================
CGauge::CGauge(int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) : CObject2D(nPri,bUseintPri,type,ObjType),
m_nParam(0),m_nParamOld(0),m_type(GAUGETYPE::PLAYERHP),m_nMaxParam(0),m_fShakePower(0.0f),m_nShakeTime(0), m_bIsGaugeFull(false),m_nFullGaugeCntTime(0),m_bGaugeProcess(true)
{

}
//==================================================================================================================================

//===================================================================
//デストラクタ
//===================================================================
CGauge::~CGauge()
{

}
//==================================================================================================================================

//===================================================================
//初期化処理
//===================================================================
HRESULT CGauge::Init()
{
	CObject2D::Init();//2Dオブジェクト初期化
	return S_OK;
}
//==================================================================================================================================


//===================================================================
//終了処理
//===================================================================
void CGauge::Uninit()
{
	CObject2D::Uninit();//2Dオブジェクト終了
}
//==================================================================================================================================

//===================================================================
//更新処理
//===================================================================
void CGauge::Update()
{
	if (m_bGaugeProcess == true)
	{//ゲージ処理

		float fRatio;                                        //現在のゲージの割合
		float fMaxWidth = GetMaxWidth();                     //2Dオブジェクトの横幅の最大値を取得する

		if (m_nParam > m_nMaxParam)
		{//パラメータが最大値を超えていたら、最大値に固定
			m_nParam = m_nMaxParam;
		}

		fRatio = (float)(m_nParam) / (float)(m_nMaxParam);   //パラメータの最大値と現在の値の割合を求める

		//シェイクさせる
		if (m_nShakeTime > 0)
		{
			float fRatioRot = static_cast<float>(rand() % 100 + 1) / 100;//演習を１００分割してランダムな方向を求める
			SetPos(GetSupportPos() + D3DXVECTOR3(sinf((D3DX_PI * 2) * fRatioRot) * m_fShakePower, cosf((D3DX_PI * 2) * fRatioRot) * m_fShakePower, 0.0f));//ランダムな位置に設定
			m_nShakeTime--;//シェイク時間を減らす

			if (m_nShakeTime == 0)
			{//シェイク時間が０になったら支点に戻す
				SetPos(GetSupportPos());
			}
		}

		SetWidth(fMaxWidth * fRatio);//横幅をゲージの割合で決めれ宇

		FullGaugeTiming();//ゲージが最大になったタイミングでフラグをtrueにする処理
	}


	CObject2D::Update();//オブジェクト2Dの更新処理
}
//==================================================================================================================================

//===================================================================
//描画処理
//===================================================================
void CGauge::Draw()
{
	CObject2D::Draw();//2Dオブジェクト描画処理
}
//==================================================================================================================================

//===================================================================
//パラメータを増加させる
//===================================================================
void CGauge::AddParam(int nParam)
{
	m_nParam += nParam;//パラメータを増やす
}
//==================================================================================================================================

//===================================================================
//死亡フラグを設定
//===================================================================
void CGauge::SetDeath()
{
	CObject2D::SetDeath();//オブジェクト2D
}
//==================================================================================================================================

//===================================================================
//パラメータを設定
//===================================================================
void CGauge::SetParam(int nParam)
{
	m_nParamOld = m_nParam;                                    //一つ前のパラメータを設定
	m_nParam = nParam;                                         //パラメータ
	int nDamage = m_nParamOld - m_nParam;                      //一つ前のパラメータを比べる
	float fRatio = (float)(m_nParam) / (float)(m_nMaxParam);   //現在のゲージの割合
	float fMaxWidth = GetMaxWidth();                           //2Dオブジェクトの横幅の最大値を取得する
	float fDamageRatio = 1.0f - fRatio;                        //減った割合を
	float fWidth = fMaxWidth * fRatio;                         //横幅を割合で求める
	SetWidth(fWidth);                                          //横幅を設定
}
//==================================================================================================================================

//===================================================================
//生成処理
//===================================================================
CGauge * CGauge::Create(GAUGETYPE type, int nParam, float fWidth, float fHeight, D3DXVECTOR3 pos)
{
	CGauge* pGauge = DBG_NEW CGauge;                                                  //弾を生成
	pGauge->Init();                                                                   //初期化処理
	pGauge->SetUseDeath(false);                                                       //死亡フラグを発動するかどうかを設定する
	pGauge->m_type = type;                                                            //ゲージの種類
	pGauge->m_nParam = 0;                                                             //パラメータ
	pGauge->m_nMaxParam = nParam;                                                     //最大パラメータ
	pGauge->SetPos(pos);                                                              //位置
	pGauge->SetSupportPos(pos);                                                       //初期位置を設定
	pGauge->SetWidth(fWidth);                                                         //横幅
	pGauge->SetMaxWidth(fWidth);                                                      //最大横幅
	pGauge->SetHeight(fHeight);                                                       //高さ
	pGauge->SetMaxHeight(fHeight);                                                    //最大高さ
	pGauge->SetAnim(0);                                                               //アニメーションパターンを設定
	pGauge->SetColor(D3DXCOLOR(0.0f, 0.0f, 1.0f, 1.0f), false, 1.0f);                 //色
	pGauge->SetAnimInfo(1, 1, false);                                                 //アニメーション情報を設定
	return pGauge;
}
//==================================================================================================================================

//===================================================================
//ゲージがマックスになったタイミングを表す
//===================================================================
void CGauge::FullGaugeTiming()
{
	if (m_nFullGaugeCntTime == 1)
	{//ゲージが最大になって１フレーム後にフラグをfalseにする
		m_bIsGaugeFull = false;
	}

	if (m_nParam == m_nMaxParam)
	{//パラメータが最大に達したら
		if (m_bIsGaugeFull == false && m_nFullGaugeCntTime == 0)
		{//最大に達したフラグがfalseでゲージがマックスになった時間が０フレームだったrあ
			m_bIsGaugeFull = true;//ゲージが最大になったフラグをtrueにする
			m_nFullGaugeCntTime++;//フレーム数を＋１
		}
	}
	else
	{
		m_nFullGaugeCntTime = 0;//フレーム数を０に
	}
}
//==================================================================================================================================