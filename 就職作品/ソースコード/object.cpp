//=========================================================================================
//
//７月１６日：オブジェクトのリスト管理を実装[Object.cpp]
//Author:ShinaTaiyo
//
//=========================================================================================

//========================
//インクルード
//========================
#include "object.h"
#include "object2d.h"
#include "renderer.h"
#include "manager.h"
#include "game.h"
//====================================================

//========================
//静的メンバ変数
//========================
int CObject::m_nNumAll = 0;//オブジェクト総数
CObject* CObject::m_apObject[CObject::m_nMAXPRIORITY][CObject::m_nMAXOBJECT] = {};
CObject* CObject::m_pTop[CObject::m_nMAXPRIORITY] = {};
CObject* CObject::m_pCur[CObject::m_nMAXPRIORITY] = {};
bool CObject::m_bActivationReleaseAll = false;            //ReleaseAllを発動するかどうか
//====================================================

//=====================================================
//コンストラクタ（描画順設定用）
//=====================================================
CObject::CObject(int nPriority,bool bUseintPriority, TYPE Type, OBJECTTYPE ObjType) : m_type(Type),m_ObjectType(ObjType),
m_bDeath(false), m_bUseDeath(false),m_pPrev(nullptr),m_pNext(nullptr),
m_nPriority(nPriority),m_bCreateSuccess(false),m_nCntFrame(0),m_ManagerObjectType(MANAGEROBJECTTYPE::NONE),m_bIsStopUpdatePause(true)
{
	m_bCreateSuccess = false;                       //生成に成功したかどうか
	m_bDeath = false;                               //死亡フラグ
	m_bUseDeath = true;                             //死亡フラグを発動するかどうか
	CObject* pObj = nullptr;                        //オブジェクト取得用

	if (bUseintPriority == true)
	{
		m_nPriority = nPriority;
	}
	else
	{
		m_nPriority = static_cast<int>(m_type);
	}

	m_nCntFrame = 0;                                //フレーム数をカウントする
	//先頭がいなかったら登録
	if (m_pTop[m_nPriority] == nullptr)
	{//先頭いなかったら前も後ろもいない
		m_bCreateSuccess = true;//生成成功
		m_nNumAll++;
		m_pTop[m_nPriority] = this;//自分自信をトップオブジェクトに代入
		m_pCur[m_nPriority] = this;//自分自身をカレントオブジェクトに代入
		m_pPrev = nullptr;         //前はいない
		m_pNext = nullptr;         //次もいない
	}
	else
	{//先頭が存在している時
		m_nNumAll++;
		m_bCreateSuccess = true;//生成成功

		pObj = m_pCur[m_nPriority];          //カレントオブジェクトを格納
		pObj->m_pNext = this;
		m_pPrev = pObj;
		m_pNext = nullptr;
		m_pCur[m_nPriority] = this;          //カレントオブジェクトに自分自身を格納
	}
}
//======================================================================================================================

//=====================================================
//デストラクタ
//=====================================================
CObject::~CObject()
{

}
//======================================================================================================================

//=====================================================
//初期化処理
//=====================================================
HRESULT CObject::Init()
{
	return S_OK;
}
//======================================================================================================================

//=====================================================
//終了処理
//=====================================================
void CObject::Uninit()
{

}
//======================================================================================================================

//=====================================================
//別枠の終了処理
//=====================================================
void CObject::ExtraUninit()
{

}
//======================================================================================================================

//=====================================================
//更新処理
//=====================================================
void CObject::Update()
{
	m_nCntFrame++;

}
//======================================================================================================================

//=====================================================
//描画処理
//=====================================================
void CObject::Draw()
{

}
//======================================================================================================================

//=====================================================
//全オブジェクトの開放
//=====================================================
void CObject::ReleaseAll()
{	
	CObject* pObj = nullptr;//オブジェクト格納用

	for (int nCntPriority = 0; nCntPriority < m_nMAXPRIORITY; nCntPriority++)
	{
		pObj = m_pTop[nCntPriority];//トップオブジェクトを取得
		while (pObj != nullptr)
		{
			//次のオブジェクトを格納
			CObject* pNext = pObj->m_pNext;

			if (pObj->m_bUseDeath == true)
			{
				pObj->SetDeath();
			}
			//pObj->m_bDeath = true;
			pObj = pNext;
		}
	}
}
//======================================================================================================================

//=====================================================
//全オブジェクトの更新
//=====================================================
void CObject::UpdateAll()
{
	CObject* pObj = nullptr;//オブジェクト格納用

	for (int nCntPriority = 0; nCntPriority < m_nMAXPRIORITY; nCntPriority++)
	{
		pObj = m_pTop[nCntPriority];//トップオブジェクトを取得

		while (pObj != nullptr)
		{
			if (CGame::GetPauseFlag())
			{//ゲームモードがポーズ状態だったら

				//次のオブジェクトを格納
				CObject* pNext = pObj->m_pNext;

				if (!pObj->m_bIsStopUpdatePause)
				{//ポーズ中に更新を止めないなら
					pObj->Update();
				}

				pObj = pNext;//リストを次へ
			}
			else
			{//ゲームモードがポーズ状態じゃなかったら
				CObject* pNext = pObj->m_pNext;    //次のオブジェクトを格納
				pObj->Update();                    //更新処理
				pObj = pNext;                      //リストを次へ
			}
		}
	}

	ReleaseProcess();//リストの破棄をする処理
}
//======================================================================================================================

//=====================================================
//全オブジェクトの描画
//=====================================================
void CObject::DrawAll()
{
	CObject* pObj = nullptr;//オブジェクト格納用
	for (int nCnt = 0; nCnt < static_cast<int>(TYPE::MAX); nCnt++)
	{
	    pObj = m_pTop[s_nDrawPriority[nCnt]]; // トップオブジェクトを取得
		while (pObj != nullptr)
		{
			CObject* pNext = pObj->m_pNext; // 次のオブジェクトを格納
			pObj->Draw(); // 描画
			pObj = pNext;
		}
	}

}
//======================================================================================================================

//=====================================================
//死亡フラグを設定
//=====================================================
void CObject::SetDeath()
{
	if (m_bUseDeath == true)
	{
		m_bDeath = true;
	}
}
//======================================================================================================================

//=====================================================
//全オブジェクトの総数を取得する
//=====================================================
int CObject::GetNumAll()
{
	return m_nNumAll;
}
//======================================================================================================================

//=====================================================
//オブジェクト取得処理
//=====================================================
CObject* CObject::GetCObject(int nIdx, int nPriority)
{
	return m_apObject[nPriority][nIdx];
}
//======================================================================================================================

//=====================================================
//タイプ取得処理
//=====================================================
CObject::TYPE CObject::GetType()//※返り値に関しては、まだ定義されているわけではないので、クラス内で作ったものを返り値に使う場合は、スコープを付けよう！
{
	return m_type;
}
//======================================================================================================================

//=====================================================
//タイプ設定処理
//=====================================================
void CObject::SetType(TYPE type)
{
	m_type = type;
}
//======================================================================================================================

//=====================================================
//リストを破棄する処理
//=====================================================
void CObject::ReleaseProcess()
{
	CObject* pObj = nullptr;//オブジェクト格納用

	//死亡フラグを発動
	for (int nCntPriority = 0; nCntPriority < m_nMAXPRIORITY; nCntPriority++)
	{
		pObj = m_pTop[nCntPriority];//トップオブジェクトを取得
		while (pObj != nullptr)
		{
			//次のオブジェクトを格納
			CObject* pNext = pObj->m_pNext;

			if (pObj->m_bDeath == true)
			{//死亡フラグがtrueなら破棄する

				pObj->Release();
			}
			pObj = pNext;
		}
	}

}
//======================================================================================================================

//=====================================================
//自分自身の開放
//=====================================================
void CObject::Release()
{
	Uninit();                  //終了処理

	int nPriority = m_nPriority;
	CObject* PrevObj = nullptr;//前のオブジェクト格納用
	CObject* NextObj = nullptr;//次のオブジェクト格納用

	//前後のアドレスを格納
	PrevObj = m_pPrev;//前のオブジェクトのアドレスを格納
	NextObj = m_pNext;//次のオブジェクトのアドレスを格納

	//オブジェクト総数を減らす
	m_nNumAll--;

	//==================================================
	//消されたオブジェクトの両端をつなげる
	//==================================================
	if (PrevObj != nullptr)
	{
		PrevObj->m_pNext = nullptr;
		PrevObj->m_pNext = NextObj;//前のオブジェクトの次のオブジェクトを設定
	}
	else
	{//消えたオブジェクトの前のオブジェクトがなかったので、必然的に消えたオブジェクトの次のオブジェクトがトップオブジェクトになる
		m_pTop[nPriority] = nullptr;
		m_pTop[nPriority] = NextObj;
	}

	if (NextObj != nullptr)
	{
		NextObj->m_pPrev = nullptr;
		NextObj->m_pPrev = PrevObj;//次のオブジェクトの前のオブジェクトを設定
	}
	else
	{//消えたオブジェクトの次のオブジェクトがなかったので、必然的に消えたオブジェクトの前のオブジェクトが最後尾オブジェクトになる
		m_pCur[nPriority] = nullptr;
		m_pCur[nPriority] = PrevObj;
	}
	//=========================================================================================================================================
	
	//自分自身を破棄
	delete this;
}
//=============================================================================================================================================

//=======================================================================
//情報をテキストファイルに保存する
//=======================================================================
void CObject::SaveInfoTxt(fstream& WritingFile)
{
	//特になし
}
//=============================================================================================================================================

//=======================================================================
//情報をテキストファイルから読み込む
//=======================================================================
void CObject::LoadInfoTxt(fstream& LoadingFile, list<CObject*>& listSaveManager, string& Buff, CObject* pObj)
{
	//特になし
}
//=============================================================================================================================================

//=======================================================================
//エディタが情報を操作する
//=======================================================================
void CObject::ManagerChooseControlInfo()
{
	//特になし
}
//=============================================================================================================================================

//=======================================================================
//ステージマネージャーに変更したオブジェクトを渡す
//=======================================================================
CObject* CObject::ManagerChengeObject(bool bAim)
{
	return this;
}
//=============================================================================================================================================

//=======================================================================
//ステージマネージャーに今のオブジェクトをセーブする
//=======================================================================
CObject* CObject::ManagerSaveObject()
{
	return this;
}
//============================================================================================================================================