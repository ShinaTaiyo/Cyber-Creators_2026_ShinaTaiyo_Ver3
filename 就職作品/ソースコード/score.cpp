//=============================================================================================================
//
//２０２５年２月２５日：スコアを実装する[score.cpp]
//Author:ShinaTaiyo
//
//=============================================================================================================

//======================================================================
//インクルード
//======================================================================
#include "score.h"
#include "calculation.h"
#include "game.h"
#include "combo.h"
//=============================================================================================================

//======================================================================
//コンストラクタ
//======================================================================
CScore::CScore(int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) : CObject(nPri,bUseintPri,type,ObjType),m_pNumber(),m_nScore(0),m_Pos({0.0f,0.0f,0.0f})
{
	//なにもなし
}
//=============================================================================================================

//======================================================================
//デストラクタ
//======================================================================
CScore::~CScore()
{
	//なにもなし
}
//=============================================================================================================

//======================================================================
//初期化処理
//======================================================================
HRESULT CScore::Init()
{
	for (int nCnt = 0; nCnt < s_nNUMDIGIT; nCnt++)
	{//桁数分数字を生成
		if (m_pNumber[nCnt] == nullptr)
		{//数字がnullptrだったら

			//数字を生成(横幅分、位置をずらしていく)
			m_pNumber[nCnt] = CNumber::Create(m_Pos + D3DXVECTOR3(-s_fWIDTH * nCnt, 0.0f, 0.0f), s_fWIDTH, s_fHEIGHT);
			m_pNumber[nCnt]->SetUseDeath(false);//死亡フラグを使用しない(UI)
		}
	     
	}
	CObject::Init();//オブジェクト初期化処理
	return S_OK;
}
//=============================================================================================================

//======================================================================
//終了処理
//======================================================================
void CScore::Uninit()
{
	CObject::Uninit();//オブジェクト終了処理
}
//=============================================================================================================

//======================================================================
//更新処理
//======================================================================
void CScore::Update()
{
	CObject::Update();//オブジェクト更新処理
}
//=============================================================================================================

//======================================================================
//描画処理
//======================================================================
void CScore::Draw()
{
	CObject::Draw();//オブジェクト描画処理
}
//=============================================================================================================

//======================================================================
//死亡フラグ設定処理
//======================================================================
void CScore::SetDeath()
{
	if (GetUseDeath())
	{
		//数字を解放
		for (int nCnt = 0; nCnt < s_nNUMDIGIT; nCnt++)
		{
			if (m_pNumber[nCnt] != nullptr)
			{//数字が存在していたら
				m_pNumber[nCnt]->SetUseDeath(true);//死亡フラグを使用する
				m_pNumber[nCnt] = nullptr;         //ポインタを初期化
			}
		}
	}

	CObject::SetDeath();//オブジェクト死亡フラグ設定処理
}
//=============================================================================================================

//======================================================================
//スコア設定処理
//======================================================================
void CScore::SetScore(int nScore)
{
	m_nScore = nScore;//設定
	SetUpdateNumberDisp();//数字の表示更新
}
//=============================================================================================================

//======================================================================
//スコア加算処理
//======================================================================
void CScore::AddScore(int nScore)
{
	m_nScore += static_cast<int>(nScore * CGame::GetCombo()->GetComboValue() * 2.1f);//加算
	SetUpdateNumberDisp();//数字の表示更新
}
//=============================================================================================================

//======================================================================
//スコア減算処理
//======================================================================
void CScore::SubScore(int nScore)
{
	m_nScore -= nScore;//減算
	SetUpdateNumberDisp();//数字の表示更新
}
//=============================================================================================================

//======================================================================
//生成処理
//======================================================================
CScore* CScore::Create(D3DXVECTOR3 Pos)
{
	CScore* pScore = DBG_NEW CScore();//スコアの生成
	pScore->m_Pos = Pos;              //スコアの位置
	pScore->Init();                   //スコアの初期化処理（位置を設定してからそこを基準に数字を並べる)
	return pScore;
}
//=============================================================================================================

//======================================================================
//数字の表示を更新する
//======================================================================
void CScore::SetUpdateNumberDisp()
{
	int nScore = m_nScore;//スコアを代入
	int nNumDigit = 0;    //桁の数代入用
	for (int nCnt = 0; nCnt < s_nNUMDIGIT; nCnt++)
	{//桁数分数字を生成
		if (m_pNumber[nCnt] != nullptr)
		{//数字がnullptrだったら
			nNumDigit = nScore % 10;//１０で割ったあまりを求め、端の桁の数を求める
			nScore /= 10;           //桁数を減らす

			m_pNumber[nCnt]->SetAnim(nNumDigit);//数字の表示を更新
		}
	}
}
//=============================================================================================================