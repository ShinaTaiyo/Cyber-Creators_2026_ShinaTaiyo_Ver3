//=================================================================================================================
//
//２０２５年３月９日：コンポジットパターンを利用してUIに機能を追加する[ui_composite.cpp]
//Author:ShinaTaiyo
//
//=================================================================================================================

//=================================================================================================================
//インクルード
//=================================================================================================================
#include "ui_composite.h"
#include "ui.h"
#include "calculation.h"
//=================================================================================================================

//=================================================================================================================
//コンストラクタ
//=================================================================================================================
CUIComposite_Component::CUIComposite_Component(CUi* pUi)
{
	//何もなし
}
//=============================================================================================================================================

//=================================================================================================================
//デストラクタ
//=================================================================================================================
CUIComposite_Component::~CUIComposite_Component()
{
	//何もなし
}
//=============================================================================================================================================

//=================================================================================================================
//更新処理
//=================================================================================================================
void CUIComposite_Component::Update(CUi * pUi)
{
	//何もなし
}
//=============================================================================================================================================

//=================================================================================================================
//描画処理
//=================================================================================================================
void CUIComposite_Component::Draw(CUi* pUi)
{
	//何もなし
}
//=============================================================================================================================================

//*****************************************************************************************************************
//数字保持
//*****************************************************************************************************************

//=================================================================================================================
//静的メンバ宣言
//=================================================================================================================
const int CUIComposite_Numeric::s_nMAX_VALUE = static_cast<int>(std::pow(10, CUIComposite_Numeric::s_nMAX_DIGIT)) - 1;//最大数値

//=================================================================================================================
//コンストラクタ
//=================================================================================================================
CUIComposite_Numeric::CUIComposite_Numeric(CUi* pUi, int nValue, float fWidth, float fHeight) : CUIComposite_Component(pUi)
{
	m_nValue = nValue;                                                         //数字を割り当てる
	m_fWidth = fWidth;                                                         //横幅の基準値
	m_fHeight = fHeight;                                                       //高さの基準値

	if (m_nValue > s_nMAX_VALUE)//最大数値を超えていたら・・・
	{//数値を最大数値に収める
		m_nValue = s_nMAX_VALUE;
	}

	m_nDigit = CCalculation::CalculationDigit(m_nValue);                     //桁数を取得
	for (int nCnt = 0; nCnt < s_nMAX_DIGIT; nCnt++)
	{
		CNumber* pNumber = CNumber::Create(pUi->GetPos(), fWidth, fHeight);    //数字を生成
		int nNum = CCalculation::getDigit(m_nValue, nCnt);                     //桁数を取得
		pNumber->SetAnim(nNum);                                                //指定した桁の数値を取得する
		pNumber->SetUseDeath(false);                                           //死亡フラグを発動させない
		if (nCnt >= m_nDigit)
		{//取得桁数以上は描画しない
			pNumber->SetUseDraw(false);//取得した桁数以下の行は描画しない
		}
		m_VecNum.push_back(pNumber);                                           //数字の動的配列に保存
	}

	SetFunction(CUIComposite_Component::UIFUNCTION::NUMERIC);//機能の種類を設定

}
//=============================================================================================================================================

//=================================================================================================================
//デストラクタ
//=================================================================================================================
CUIComposite_Numeric::~CUIComposite_Numeric()
{
	for (auto it : m_VecNum)
	{
		it->SetUseDeath(true);//死亡フラグを使用する
		it->SetDeath();       //死亡フラグを設定
	}

	m_VecNum.clear();//クリア
}
//=============================================================================================================================================

//=================================================================================================================
//更新処理
//=================================================================================================================
void CUIComposite_Numeric::Update(CUi* pUi)
{
	int nSize = m_VecNum.size();//桁数を取得

	for (int nCnt = 0; nCnt < nSize; nCnt++)
	{//数字を横に並べ続ける（UIの端にずらし、更に数字表示の半分ずらすことでUIの端にちょうど数字がくっつくように計算。あとは現在の桁数分右にずらしてから１桁目から順番に描画）
		m_VecNum[nCnt]->SetPos(pUi->GetPos() + D3DXVECTOR3(pUi->GetWidth() / 2 + m_VecNum[nCnt]->GetWidth() / 2 +
			m_VecNum[nCnt]->GetWidth() * (m_nDigit - 1) - m_VecNum[nCnt]->GetWidth() * nCnt, 0.0f, 0.0f));
	}
}
//=============================================================================================================================================

//=================================================================================================================
//描画処理
//=================================================================================================================
void CUIComposite_Numeric::Draw(CUi* pUI)
{
	//何もなし
}
//============================================================================================================================================

//=================================================================================================================
//数字を設定する
//=================================================================================================================
void CUIComposite_Numeric::SetValue(int nValue, CUi* pUi)
{
	m_nValue = nValue;//数値を代入
	if (m_nValue > s_nMAX_VALUE)//最大数値を超えていたら・・・
	{//数値を最大数値に収める
		m_nValue = s_nMAX_VALUE;
	}

	m_nDigit = CCalculation::CalculationDigit(m_nValue);                     //桁数を取得
	int nCnt = 0;//桁数カウント用
	//再び桁数分数値の表示を生成し動的配列に格納する
	for (auto it = m_VecNum.begin(); it != m_VecNum.end(); ++it, nCnt++)
	{
		if (nCnt < m_nDigit)
		{//取得した桁数以内なら描画する
			int nNum = CCalculation::getDigit(m_nValue, nCnt);                     //桁数を取得
			(*it)->SetAnim(nNum);                                                  //指定桁数のアニメーションを設定
			(*it)->SetUseDraw(true);
		}
		else
		{//取得した桁数以下は描画しない
			(*it)->SetUseDraw(false);
		}
	}
}
//============================================================================================================================================

//*****************************************************************************************************************
//ゲージ
//*****************************************************************************************************************

//=================================================================================================================
//コンストラクタ
//=================================================================================================================
CUIComposite_Gauge::CUIComposite_Gauge(CUi* pUi, D3DXVECTOR3 GaugePos, D3DXCOLOR Col, CObject2D::POLYGONTYPE PolygonType, CGauge::GAUGETYPE GaugeType, float fMaxWidth, float fMaxHeight, int nValue, int nMaxValue) : CUIComposite_Component(pUi)
{
	m_pGauge = CGauge::Create(GaugeType, nMaxValue, fMaxWidth, fMaxHeight, GaugePos);//生成
	m_pGauge->SetPolygonType(PolygonType);                                           //ポリゴンの種類（中心点）を設定
	m_pGauge->SetParam(nValue);                                                      //パラメータを設定
	m_pGauge->SetColor(Col, false, 1.0f);                                            //色合い
	
	SetFunction(CUIComposite_Component::UIFUNCTION::GAUGE);//機能の種類を設定
}
//============================================================================================================================================

//=================================================================================================================
//デストラクタ
//=================================================================================================================
CUIComposite_Gauge::~CUIComposite_Gauge()
{
	if (m_pGauge != nullptr)
	{//ゲージが存在したら
		m_pGauge->SetUseDeath(true);//ゲージの死亡フラグを使用する
		m_pGauge->SetDeath();       //ゲージの死亡フラグを設定する
		m_pGauge = nullptr;         //ゲージのポインタを初期化
	}
}
//============================================================================================================================================

//=================================================================================================================
//更新処理
//=================================================================================================================
void CUIComposite_Gauge::Update(CUi* pUi)
{

}
//============================================================================================================================================

//=================================================================================================================
//描画処理
//=================================================================================================================
void CUIComposite_Gauge::Draw(CUi* pUi)
{

}
//============================================================================================================================================

//*****************************************************************************************************************
//コンテナ
//*****************************************************************************************************************

//=================================================================================================================
//コンストラクタ
//=================================================================================================================
CUIComposite_Container::CUIComposite_Container(CUi* pUi) : CUIComposite_Component(pUi)
{

}
//============================================================================================================================================

//=================================================================================================================
//デストラクタ
//=================================================================================================================
CUIComposite_Container::~CUIComposite_Container()
{
	for (auto Child : m_Children)
	{//全ての機能の破棄
		if (Child != nullptr)
		{
			delete Child;
		}
	}

	m_Children.clear();
}
//============================================================================================================================================

//=================================================================================================================
//更新処理
//=================================================================================================================
void CUIComposite_Container::Update(CUi* pUi)
{
	for (auto Child : m_Children)
	{//全ての機能の更新処理
		Child->Update(pUi);
	}
}
//============================================================================================================================================

//=================================================================================================================
//描画処理
//=================================================================================================================
void CUIComposite_Container::Draw(CUi* pUi)
{
	for (auto Child : m_Children)
	{//全ての機能の描画処理
		Child->Draw(pUi);
	}
}
//============================================================================================================================================

//=================================================================================================================
//機能の追加
//=================================================================================================================
void CUIComposite_Container::Add(CUIComposite_Component* pComponent)
{
	m_Children.push_back(pComponent);//機能を追加
}
//============================================================================================================================================