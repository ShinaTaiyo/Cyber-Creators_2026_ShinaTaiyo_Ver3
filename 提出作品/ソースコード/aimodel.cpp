//====================================================================================================================
//
// ２０２５年５月１８日：コードを綺麗にする[aimodel.cpp]
// Author:ShinaTaiyo
//
//====================================================================================================================

//********************************************************************************************************************
// インクルード
//********************************************************************************************************************
#include "manager.h"      // マネージャー 
#include "renderer.h"     // レンダラー
#include "aimodel.h"      // 元ヘッダ 
#include "objectXInfo.h"  // オブジェクトX情報

//********************************************************************************************************************
// 静的メンバ宣言
//********************************************************************************************************************

// モデルファイル名
const string CAIModel::m_aAIMODEL_FILENAME[static_cast<int>(CAIModel::AIMODELTYPE::MAX)] =
{
	"data\\MODEL\\AIModel\\MoveAiPoint_000.x"
};

//====================================================================================================================
// 
// publicメンバ 
//
//====================================================================================================================

//====================================================================================================================
// コンストラクタ
//====================================================================================================================
CAIModel::CAIModel(int nPri, bool bUseintPri, CObject::TYPE type, CObject::OBJECTTYPE ObjType) :
	CObjectX(nPri,bUseintPri,type,ObjType),   
	m_Type{ CAIModel::AIMODELTYPE::MOVEPOINT }
{
	// 何もなし
}

//====================================================================================================================
// デストラクタ
//====================================================================================================================
CAIModel::~CAIModel()
{
	// 何もなし
}

//====================================================================================================================
// 初期化処理
//====================================================================================================================
HRESULT CAIModel::Init()
{
	CObjectX::Init(); // オブジェクトX初期化
	return S_OK;
}

//====================================================================================================================
// 終了処理
//====================================================================================================================
void CAIModel::Uninit()
{
	CObjectX::Uninit(); // オブジェクトX終了処理
}

//====================================================================================================================
// 更新処理
//====================================================================================================================
void CAIModel::Update()
{
	CObjectX::Update(); // オブジェクトX更新処理
}

//====================================================================================================================
// 描画処理
//====================================================================================================================
void CAIModel::Draw()
{
	// オブジェクトリストで描画処理を呼びたくないので何もなし
}

//====================================================================================================================
// 追加描画処理（エディット時にこのモデルを持っているクラスが呼び出す）
//====================================================================================================================
void CAIModel::ExtraDraw()
{
	CObjectX::Draw(); // オブジェクトX描画処理
}

//====================================================================================================================
// 死亡フラグ設定処理
//====================================================================================================================
void CAIModel::SetDeath()
{
	CObjectX::SetDeath(); // オブジェクトX死亡フラグ設定処理
}

//====================================================================================================================
// 生成処理
//====================================================================================================================
CAIModel* CAIModel::Create(AIMODELTYPE type, D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 Scale, D3DXMATRIX* mtxWorld)
{
	// === 変数宣言 ===

	CAIModel* pAiModel = DBG_NEW CAIModel; // 敵を生成
	int nIdx = 0;                          // モデルのインデックス

	// === 情報設定 ===

	pAiModel->Init(); // 初期化処理
	pAiModel->m_Type = type; // 敵の種類
	pAiModel->SetUseDeath(false); // 死亡フラグを発動するかどうかを設定する
	pAiModel->GetPosInfo().SetPos(pos);         // 位置を設定
	pAiModel->GetPosInfo().SetPosOld(pos);      // 1f前の位置を初期設定
	pAiModel->GetPosInfo().SetSupportPos(pos);  // 初期位置
	pAiModel->GetDrawInfo().SetUseDraw(true);   // 描画をする
	pAiModel->GetDrawInfo().SetUseShadow(true); // 影を描画する
	pAiModel->GetSizeInfo().SetScale(Scale);       // オブジェクトの拡大率
	pAiModel->GetSizeInfo().SetFormarScale(Scale); // 元の拡大率を設定する
	pAiModel->GetDrawInfo().SetMtxParent(mtxWorld); // 親マトリックスを設定する

	// === モデル登録と設定 ===

	// モデルインデックスを取得
	nIdx = CManager::GetObjectXInfo()->Regist(m_aAIMODEL_FILENAME[static_cast<int>(type)]);

	// オブジェクトX情報を割り当てる
	pAiModel->CObjectX::BindObjectXInfo(
		CManager::GetObjectXInfo()->GetMesh(nIdx),      // 頂点情報
		CManager::GetObjectXInfo()->GetBuffMat(nIdx),   // マテリアル情報 
		CManager::GetObjectXInfo()->GetdwNumMat(nIdx),  // マテリアル数
		CManager::GetObjectXInfo()->GetTexture(nIdx),   // テクスチャ情報
		CManager::GetObjectXInfo()->GetColorValue(nIdx) // 色合い
	);                          

	pAiModel->SetSize(); // Xオブジェクトのサイズを設定する（割り当てられたモデル情報を基に設定するので割り当て処理の後に設定）

	return pAiModel;
}
//====================================================================================================================