//========================================================
//
//配列変えないバージョン[Player.cpp]
//Author:ShinaTaiyo
//
//=========================================================
#include "Player.h"
#include "main.h"
#include "input.h"
#include "sound.h"
#include "fade.h"
#include "camera.h"
#include "shadow.h"
#include "bullet.h"
#include "emitter.h"
#include "block.h"
#include <stdio.h>
#include <string.h>
//グローバル変数
LPD3DXMESH g_pMeshPlayer = NULL;//メッシュ（頂点情報）へのポインタ
LPD3DXBUFFER g_pBuffMatPlayer = NULL;//マテリアルへのポインタ
DWORD g_dwNumMatPlayer = 0;//マテリアルの数
D3DXVECTOR3 g_posPlayer;//位置
D3DXVECTOR3 g_rotPlayer;//向き
D3DXMATRIX g_mtxWorldPlayer;//ワールドマトリックス
#define Player_SCALE (10.0f)

#define PLAYERSET "data\\TEXTFILE\\PlayerSet.txt"//プレイヤーを設定する

Player g_aPlayer;//プレイヤーの情報
ModelParts g_aModelParts[MAX_PLAYERPARTS]; // 各パーツの情報
int g_nDelay = 0;//ディレイカウント

int g_nNumPlayerModel = 0;//読み込むプレイヤーのパーツの最大数

//タイトル画面の初期化処理
void InitPlayer(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();//デバイスへのポインタと取得


	g_nNumPlayerModel = 0;

	//g_posPlayer = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	//g_rotPlayer = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	//============================
	//モデルパーツの情報の初期化
	//============================
	for (int nCntPlayerParts = 0; nCntPlayerParts < MAX_PLAYERPARTS; nCntPlayerParts++)
	{
		g_aPlayer.aModel[nCntPlayerParts].pos = D3DXVECTOR3(0.0f,0.0f,0.0f);
		g_aPlayer.aModel[nCntPlayerParts].rot = D3DXVECTOR3(0.0f,0.0f,0.0f);
		g_aPlayer.aModel[nCntPlayerParts].pMesh = NULL;
		g_aPlayer.aModel[nCntPlayerParts].pBuffMat = NULL;
		g_aPlayer.aModel[nCntPlayerParts].dwNumMatPlayer = 0;
		g_aPlayer.aModel[nCntPlayerParts].mtxWorld;
		g_aPlayer.aModel[nCntPlayerParts].nIdxModelParent = 0;
		g_aPlayer.aModel[nCntPlayerParts].bUse = 0;
		g_aPlayer.aModel[nCntPlayerParts].nType = 0;


	}

	//===========================
	//プレイヤー情報の初期化
	//===========================
	g_aPlayer.pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	g_aPlayer.posOld = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	g_aPlayer.rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	g_aPlayer.targetrot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	g_aPlayer.move = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	g_aPlayer.nIdxShadow = -1;//影のインデックス
	g_aPlayer.fWidth = 5.0f;
	g_aPlayer.fHeight = 10.0f;

	//モデルの読み込み
	D3DXLoadMeshFromX("data\\MODEL\\RealStarWarrior.x",
		D3DXMESH_SYSTEMMEM,
		pDevice,
		NULL,
		&g_pBuffMatPlayer,
		NULL,
		&g_dwNumMatPlayer,
		&g_pMeshPlayer);

	g_aPlayer.nIdxShadow = SetShadow();

	g_nDelay = 0;//ディレイカウント



	char aString[100] = {};//文字列を読み込むための変数
	int nMaxRoadModel = 0;//読み込むモデルの最大数
	int nIdx = 0;//読み込んだモデルの番号（インデックス）
	int nType = 0;//読み込むモデルの種類

	float fPosX = 0.0f;//モデルの位置X
	float fPosY = 0.0f;//モデルの位置Y
	float fPosZ = 0.0f;//モデルの位置Z

	float fRotX = 0.0f;//モデルの位置X
	float fRotY = 0.0f;//モデルの位置Y
	float fRotZ = 0.0f;//モデルの位置Z
	int nCnt = 0;//読み込むモデルを数える用
	FILE* pFile;//ファイルポインタ

	char aStringPass[100] = {};

	pFile = fopen(PLAYERSET, "r");

	if (pFile != NULL)//ファイルが開いているかどうか
	{
		while (1)
		{

			fscanf(pFile, "%s", &aString[0]);

			if (strcmp(&aString[0], "ENDSCRIPT") == 0)
			{
				fclose(pFile);
				break;//行の最後でこの文字列を判定させることにより、ループを終わらせる
			}
			else if (strcmp(&aString[0], "NUM_MODEL") == 0)//読み込むモデルの種類数を決める
			{
				fscanf(pFile, "%d", &g_nNumPlayerModel);

				for (int nCnt = 0; nCnt < 3; nCnt++)
				{
					fscanf(pFile, "%s", &aString[0]);
				}
				for (int nRoadModel = 0; nRoadModel < g_nNumPlayerModel; nRoadModel++)
				{
					/*	while (1)
						{*/
					fscanf(pFile, "%s", &aString[0]);

					if (strcmp(&aString[0], "MODEL_FILENAME") == 0)
					{
						fscanf(pFile, "%s", &aStringPass[0]);
						//モデルの読み込み
						D3DXLoadMeshFromX(&aStringPass[0],
							D3DXMESH_SYSTEMMEM,
							pDevice,
							NULL,
							&g_aPlayer.aModel[nRoadModel].pBuffMat,//モデルでは、これも配列にする
							NULL,
							&g_aPlayer.aModel[nRoadModel].dwNumMatPlayer,//モデルでは、これも配列にする
							&g_aPlayer.aModel[nRoadModel].pMesh);
						fscanf(pFile, "%s", &aString[0]);
					}
					/*	nCnt++;
						if (nCnt == g_nNumModel)
						{
							break;
						}*/
				}
			}
			else if (strcmp(&aString[0], "MODELSET") == 0)
			{
				while (1)
				{
					fscanf(pFile, "%s", &aString[0]);
				    if (strcmp(&aString[0], "TYPE") == 0)
					{
						fscanf(pFile, "%d", &nType);//インデックスの種類を決める
					}
					else if (strcmp(&aString[0], "IDX") == 0)
					{
						fscanf(pFile, "%d", &nIdx);//インデックスの種類を決める
					}
					else if (strcmp(&aString[0], "POS") == 0)
					{
						fscanf(pFile, "%f%f%f", &fPosX, &fPosY, &fPosZ);//位置情報を読み込む
					}
					else if (strcmp(&aString[0], "ROT") == 0)
					{
						fscanf(pFile, "%f%f%f", &fRotX, &fRotY, &fRotZ);//向き情報を読み込む
					}
					else if (strcmp(&aString[0], "ENDMODELSET") == 0)
					{
						SetPlayerParts(D3DXVECTOR3(fPosX, fPosY, fPosZ), D3DXVECTOR3(fRotX, fRotY, fRotZ), nIdx,nType);
						break;
					}
				}
			}
		}
	}
	g_aPlayer.nIdxShadow = SetShadow();

}

//==============================
//タイトル画面の終了処理
//==============================
void UninitPlayer(void)
{
	for (int nCnt = 0; nCnt < g_nNumPlayerModel; nCnt++)
	{
		//メッシュの破棄
		if (g_aPlayer.aModel[nCnt].pMesh != NULL)
		{
			g_aPlayer.aModel[nCnt].pMesh->Release();
			g_aPlayer.aModel[nCnt].pMesh = NULL;
		}
		//マテリアルの破棄
		if (g_aPlayer.aModel[nCnt].pBuffMat != NULL)
		{
			g_aPlayer.aModel[nCnt].pBuffMat->Release();
			g_aPlayer.aModel[nCnt].pBuffMat = NULL;
		}
	}
}
//============================
//タイトル画面の更新処理
//============================
void UpdatePlayer(void)
{
	Camera* pCamera = GetCamera();

	g_nDelay++;//ディレイカウント


	g_aPlayer.move.y += -2.5f;


	

	

	Block* pBlock = GetBlock();
	for (int nCntBlock = 0; nCntBlock < MAX_BLOCK; nCntBlock++, pBlock++)
	{
		if (pBlock->bUse == true)
		{
				if (g_aPlayer.pos.x + g_aPlayer.fWidth >= pBlock->pos.x - 20.0f &&
				g_aPlayer.pos.x - g_aPlayer.fWidth <= pBlock->pos.x + 20.0f &&
				g_aPlayer.pos.y <= pBlock->pos.y + 20.0f &&
				g_aPlayer.posOld.y >= pBlock->pos.y + 20.0f &&
				g_aPlayer.pos.z + g_aPlayer.fWidth >= pBlock->pos.z - 20.0f &&
				g_aPlayer.pos.z - g_aPlayer.fWidth <= pBlock->pos.z + 20.0f)
			{
				g_aPlayer.pos.y = pBlock->pos.y + 20.0f;
				g_aPlayer.move.y = 0.0f;
			}
				else if(g_aPlayer.pos.x + g_aPlayer.fWidth >= pBlock->pos.x - 20.0f &&
					g_aPlayer.pos.x - g_aPlayer.fWidth <= pBlock->pos.x + 20.0f &&
					g_aPlayer.pos.y + g_aPlayer.fHeight >= pBlock->pos.y - 20.0f &&
					g_aPlayer.pos.y <= pBlock->pos.y + 20.0f &&
					g_aPlayer.pos.z + g_aPlayer.fWidth >= pBlock->pos.z - 20.0f &&
					g_aPlayer.pos.z + g_aPlayer.fWidth <= pBlock->pos.z + 20.0f)
				{
					g_aPlayer.move.x = 0.0f;
					g_aPlayer.move.z = 0.0f;
					g_aPlayer.pos = g_aPlayer.posOld;
				}

		}
	}

	if (pCamera->nMode == CAMERAMODE_REVOLUTION)
	{
		//if (GetKeyboardPress(DIK_W) == true)
		//{
		//	g_aPlayer.move.x += sinf(D3DX_PI + pCamera->rot.y) * -5.0f;
		//	g_aPlayer.move.z += cosf(D3DX_PI + pCamera->rot.y) * -5.0f;
		//	//g_aPlayer.rot.y = pCamera->rot.y;//カメラと同じ向きにプレイヤーの向きを揃える
		//	g_aPlayer.targetrot.y = pCamera->rot.y;
		//}
		//if (GetKeyboardPress(DIK_S) == true)
		//{
		//	g_aPlayer.move.x += sinf(D3DX_PI + pCamera->rot.y) * 5.0f;
		//	g_aPlayer.move.z += cosf(D3DX_PI + pCamera->rot.y) * 5.0f;
		//	//g_aPlayer.rot.y = pCamera->rot.y + D3DX_PI;//カメラの向きの後ろ側にプレイヤーの向きを揃える
		//	g_aPlayer.targetrot.y = pCamera->rot.y + D3DX_PI;//カメラの向きの後ろ側にプレイヤーの向きを揃える

		//}
		//if (GetKeyboardPress(DIK_D) == true)
		//{

		//	g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * 5.0f;
		//	g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * 5.0f;
		//	//g_aPlayer.rot.y = pCamera->rot.y + (D3DX_PI / 2);//カメラの向きの右横にプレイヤーの向きを揃える
		//	g_aPlayer.targetrot.y = pCamera->rot.y + (D3DX_PI / 2);//カメラの向きの右横にプレイヤーの向きを揃える

		//}
		//if (GetKeyboardPress(DIK_A) == true)
		//{
		//	g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * -5.0f;
		//	g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * -5.0f;
		//	//g_aPlayer.rot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える
		//	g_aPlayer.targetrot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える

		//}

		//=======================
		//ニュータイプ移動処理
		//=======================

		if (GetKeyboardPress(DIK_A) == true || GetJoypadPress(JOYKEY_LEFT) == true)
		{//Aキーが押された
			if (GetKeyboardPress(DIK_W) == true || GetJoypadPress(JOYKEY_UP))
			{//Wキーが押された
				//左上移動

				g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI * 0.25f)) * -5.0f;
				g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI * 0.25f)) * -5.0f;
				//g_aPlayer.rot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える
				g_aPlayer.targetrot.y = pCamera->rot.y - (D3DX_PI * 0.25f);//カメラの向きの左側にプレイヤーの向きを揃える
			}
			else if (GetKeyboardPress(DIK_S) == true || GetJoypadPress(JOYKEY_DOWN) == true)
			{//Sキーが押された
				//左下移動
				g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI * 0.75f)) * -5.0f;
				g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI * 0.75f)) * -5.0f;
				//g_aPlayer.rot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える
				g_aPlayer.targetrot.y = pCamera->rot.y - (D3DX_PI * 0.75f);//カメラの向きの左側にプレイヤーの向きを揃える
			}
			else
			{
				g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * -5.0f;
				g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * -5.0f;
				//g_aPlayer.rot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える
				g_aPlayer.targetrot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える
			}
		}


		else if (GetKeyboardPress(DIK_D) == true || GetJoypadPress(JOYKEY_RIGHT) == true)
		{//Dキーが押された

			if (GetKeyboardPress(DIK_W) == true || GetJoypadPress(JOYKEY_UP) == true)
			{//Wきーが押された
				//右上移動
				g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI * 0.75f)) * 5.0f;
				g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI * 0.75f)) * 5.0f;
				//g_aPlayer.rot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える
				g_aPlayer.targetrot.y = pCamera->rot.y + (D3DX_PI * 0.25f);//カメラの向きの左側にプレイヤーの向きを揃える
			}
			else if (GetKeyboardPress(DIK_S) == true || GetJoypadPress(JOYKEY_DOWN) == true)
			{//Sきーが押されたs
				//右下移動
				g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI * 0.25f)) * 5.0f;
				g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI * 0.25f)) * 5.0f;
				//g_aPlayer.rot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える
				g_aPlayer.targetrot.y = pCamera->rot.y + (D3DX_PI * 0.75f);//カメラの向きの左側にプレイヤーの向きを揃える
			}
			else
			{//右移動
				g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * 5.0f;
				g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * 5.0f;
				//g_aPlayer.rot.y = pCamera->rot.y + (D3DX_PI / 2);//カメラの向きの右横にプレイヤーの向きを揃える
				g_aPlayer.targetrot.y = pCamera->rot.y + (D3DX_PI / 2);//カメラの向きの右横にプレイヤーの向きを揃える
			}
		}
		else if (GetKeyboardPress(DIK_W) == true || GetJoypadPress(JOYKEY_UP) == true)
		{//Wキーが押されたw
			g_aPlayer.move.x += sinf(D3DX_PI + pCamera->rot.y) * -5.0f;
			g_aPlayer.move.z += cosf(D3DX_PI + pCamera->rot.y) * -5.0f;
			//g_aPlayer.rot.y = pCamera->rot.y;//カメラと同じ向きにプレイヤーの向きを揃える
			g_aPlayer.targetrot.y = pCamera->rot.y;
		}
		else if (GetKeyboardPress(DIK_S) == true || GetJoypadPress(JOYKEY_DOWN) == true)
		{//Sキーが押された
			g_aPlayer.move.x += sinf(D3DX_PI + pCamera->rot.y) * 5.0f;
			g_aPlayer.move.z += cosf(D3DX_PI + pCamera->rot.y) * 5.0f;
			//g_aPlayer.rot.y = pCamera->rot.y + D3DX_PI;//カメラの向きの後ろ側にプレイヤーの向きを揃える
			g_aPlayer.targetrot.y = pCamera->rot.y + D3DX_PI;//カメラの向きの後ろ側にプレイヤーの向きを揃える
		}
	}
	else if (pCamera->nMode == CAMERAMODE_ROTATION)
	{
		if (GetKeyboardPress(DIK_W) == true)
		{
			g_aPlayer.move.x += sinf(D3DX_PI + pCamera->rot.y) * 5.0f;
			g_aPlayer.move.z += cosf(D3DX_PI + pCamera->rot.y) * 5.0f;
			//g_aPlayer.rot.y = pCamera->rot.y;//カメラと同じ向きにプレイヤーの向きを揃える
			g_aPlayer.targetrot.y = pCamera->rot.y;//カメラと同じ向きにプレイヤーの向きを揃える

		}
		if (GetKeyboardPress(DIK_S) == true)
		{
			g_aPlayer.move.x += sinf(D3DX_PI + pCamera->rot.y) * -5.0f;
			g_aPlayer.move.z += cosf(D3DX_PI + pCamera->rot.y) * -5.0f;
			//g_aPlayer.rot.y = pCamera->rot.y + D3DX_PI;//カメラの向きの後ろ側にプレイヤーの向きを揃える
			g_aPlayer.targetrot.y = pCamera->rot.y + D3DX_PI;//カメラの向きの後ろ側にプレイヤーの向きを揃える


		}
		if (GetKeyboardPress(DIK_D) == true)
		{

			g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * -5.0f;
			g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * -5.0f;
			//g_aPlayer.rot.y = pCamera->rot.y + (D3DX_PI / 2);//カメラの向きの右横にプレイヤーの向きを揃える
			g_aPlayer.targetrot.y = pCamera->rot.y + (D3DX_PI / 2);//カメラの向きの右横にプレイヤーの向きを揃える


		}
		if (GetKeyboardPress(DIK_A) == true)
		{
			g_aPlayer.move.x += sinf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * 5.0f;
			g_aPlayer.move.z += cosf((D3DX_PI + pCamera->rot.y) - (D3DX_PI / 2)) * 5.0f;
			//g_aPlayer.rot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える
			g_aPlayer.targetrot.y = pCamera->rot.y - (D3DX_PI / 2);//カメラの向きの左側にプレイヤーの向きを揃える

		}
	}

	//=====================================================================================================================

	////移動量を更新（減衰させる）
	g_aPlayer.move.x += (0.0f - g_aPlayer.move.x) * 0.5f;

	if (GetKeyboardTrigger(DIK_SPACE) == true)
	{
		g_aPlayer.move.y += 30.0f;
	}
	//g_aPlayer.move.y += (0.0f - g_aPlayer.move.y) * 0.5f;
	g_aPlayer.move.z += (0.0f - g_aPlayer.move.z) * 0.5f;
	//g_aPlayer.move.y += (0.0f - g_aPlayer.move.y) * 0.5f;
	g_aPlayer.posOld = g_aPlayer.pos;
	g_aPlayer.pos.y += g_aPlayer.move.y;
	g_aPlayer.pos.x += g_aPlayer.move.x;
	g_aPlayer.pos.z += g_aPlayer.move.z;


	//弾発射処理
	if (GetKeyboardPress(DIK_K) == true)
	{
		SetBullet(0, 20, 20.0f, 20.0f,
			D3DXVECTOR3(g_aPlayer.pos.x, g_aPlayer.pos.y + 20.0f, g_aPlayer.pos.z), D3DXVECTOR3(sinf(g_aPlayer.rot.y) * 10.0f, 0.0f, cosf(g_aPlayer.rot.y) * 10.0f),
			D3DXVECTOR3(0.0f, 0.0f, 0.0f));
	}

	if (g_nDelay % 100 == 0)
	{
		SetEmitterEffect(0, 60, 150, 20.0f, 0.5f, g_aPlayer.pos, D3DXVECTOR3(0.0f, 10.0f, 0.0f), D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f), 0.0f);

		float fCurve[12];//
		for (int nCnt = 0; nCnt < 12; nCnt++)
		{

			fCurve[nCnt] = ((1.0f / 6.0f) * nCnt);//角度を計算する

			SetEmitterEffect(EMITTERTYPE_CURVE, 300, 100, 10.0f, 0.3f, g_aPlayer.pos, D3DXVECTOR3(sinf(fCurve[nCnt]) * 2.0f, 1.0f, cosf(fCurve[nCnt]) * 2.0f),
				D3DXCOLOR(1.0f, 0.0f, 0.0f, 1.0f), fCurve[nCnt]);
		}
	}


	





	float fRot1 = 0.0f;
	float fRot2 = 0.0f;

	//if (g_aPlayer.targetrot.y >= pCamera->rot.y - (D3DX_PI * 0.15f)
	//	&& g_aPlayer.targetrot.y <= pCamera->rot.y + (D3DX_PI * 0.15f))
	//{
	//	fRot1 = pCamera->rot.y - D3DX_PI;
	//}
	//else
	//{
	//	fRot1 = pCamera->rot.y;
	//}



	g_aPlayer.rot.y += ((g_aPlayer.targetrot.y + fRot1) - g_aPlayer.rot.y) * 0.1f;




	if (g_aPlayer.pos.y <= 0.0f)
	{
		g_aPlayer.pos.y = 0.0f;
		g_aPlayer.move.y = 0.0f;
	}

	//影の位置を設定
	SetPositionShadow(g_aPlayer.nIdxShadow, g_aPlayer.pos,-1);
	
}

//================================
//タイトル画面の描画処理
//================================
void DrawPlayer(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();;//デバイスへのポインタと取得


	D3DXMATRIX mtxRot, mtxTrans;//計算用マトリックス

	D3DMATERIAL9 matDef;//現在のマテリアル保存用

	D3DXMATERIAL* pMat;//マテリアルデータへのポインタ

	//ワールドマトリックスの初期化
	D3DXMatrixIdentity(&g_mtxWorldPlayer);

	//向きを反映
	D3DXMatrixRotationYawPitchRoll(&mtxRot, g_aPlayer.rot.y, g_aPlayer.rot.x, g_aPlayer.rot.z);

	D3DXMatrixMultiply(&g_mtxWorldPlayer, &g_mtxWorldPlayer, &mtxRot);

	//位置を反映
	D3DXMatrixTranslation(&mtxTrans, g_aPlayer.pos.x, g_aPlayer.pos.y, g_aPlayer.pos.z);
	D3DXMatrixMultiply(&g_mtxWorldPlayer, &g_mtxWorldPlayer, &mtxTrans);

	//ワールドマトリックスの設定
	pDevice->SetTransform(D3DTS_WORLD, &g_mtxWorldPlayer);

	////現在のマテリアルを取得
	//pDevice->GetMaterial(&matDef);

	////マテリアルへのポインタを取得
	//pMat = (D3DXMATERIAL*)g_pBuffMatPlayer->GetBufferPointer();

	//for (int nCntMat = 0; nCntMat < (int)g_dwNumMatPlayer; nCntMat++)
	//{
	//	//マテリアルの設定
	//	pDevice->SetMaterial(&pMat[nCntMat].MatD3D);

	//	//テクスチャの設定
	//	pDevice->SetTexture(0, NULL);

	//	//モデル（パーツ）の描画
	//	g_pMeshPlayer->DrawSubset(nCntMat);
	//}

	////保存していたマテリアルを戻す
	//pDevice->SetMaterial(&matDef);


	//=========================================
	//モデルパーツの描画処理
	//=========================================
	for (int nCntPlayerParts = 0; nCntPlayerParts < MAX_PLAYERPARTS; nCntPlayerParts++)
	{
		if (g_aPlayer.aModel[nCntPlayerParts].bUse == true)
		{
			D3DXMATRIX mtxRot, mtxTrans;//計算用マトリックス

			D3DMATERIAL9 matDef;//現在のマテリアル保存用

			D3DXMATERIAL* pMat;//マテリアルデータへのポインタ

			//ワールドマトリックスの初期化
			D3DXMatrixIdentity(&g_aPlayer.aModel[nCntPlayerParts].mtxWorld);

			//向きを反映
			D3DXMatrixRotationYawPitchRoll(&mtxRot, g_aPlayer.aModel[nCntPlayerParts].rot.y, g_aPlayer.aModel[nCntPlayerParts].rot.x, g_aPlayer.aModel[nCntPlayerParts].rot.z);

			D3DXMatrixMultiply(&g_aPlayer.aModel[nCntPlayerParts].mtxWorld, &g_aPlayer.aModel[nCntPlayerParts].mtxWorld, &mtxRot);

			//位置を反映
			D3DXMatrixTranslation(&mtxTrans, g_aPlayer.aModel[nCntPlayerParts].pos.x, g_aPlayer.aModel[nCntPlayerParts].pos.y, g_aPlayer.aModel[nCntPlayerParts].pos.z);
			D3DXMatrixMultiply(&g_aPlayer.aModel[nCntPlayerParts].mtxWorld, &g_aPlayer.aModel[nCntPlayerParts].mtxWorld, &mtxTrans);

			//===================================================
			//自分のモデルのマトリックスとの掛け算
			//===================================================
			D3DXMATRIX mtxParent;

			D3DXMatrixMultiply(&g_aPlayer.aModel[nCntPlayerParts].mtxWorld, &g_aPlayer.aModel[nCntPlayerParts].mtxWorld, &mtxTrans);

			if (g_aPlayer.aModel[nCntPlayerParts].nIdxModelParent == -1)
			{
				mtxParent = g_mtxWorldPlayer;//親を起点として動くので、マトリックスはプレイヤー
			}
			else
			{
				int nData = g_aPlayer.aModel[nCntPlayerParts].nIdxModelParent;
			    
         		mtxParent = g_aPlayer.aModel[nData].mtxWorld;
			}

			D3DXMatrixMultiply(&g_aPlayer.aModel[nCntPlayerParts].mtxWorld, &g_aPlayer.aModel[nCntPlayerParts].mtxWorld, &mtxParent);

		    //===============================================================================================================================


			pDevice->GetMaterial(&matDef);

			for (int nCntPartsSet = 0; nCntPartsSet < g_nNumPlayerModel; nCntPartsSet++)
			{//読み込むモデルの種類数分for分を回し、同じタイプのマテリアルのポインタや、、
			//パーツの描画、マテリアルの設定をする。
				if (g_aPlayer.aModel[nCntPlayerParts].nIdxModelParent == nCntPartsSet)
				{
					//マテリアルへのポインタを取得（セットしたモデルと同じタイプ）
					pMat = (D3DXMATERIAL*)g_aPlayer.aModel[nCntPartsSet].pBuffMat->GetBufferPointer();

					//セットされたモデルとタイプが同じもののモデルのマテリアルの数分読み込む。
					for (int nCntMat = 0; nCntMat < (int)g_aPlayer.aModel[nCntPartsSet].dwNumMatPlayer; nCntMat++)
					{
						//マテリアルの設定
						pDevice->SetMaterial(&pMat[nCntMat].MatD3D);

						//テクスチャの設定
						pDevice->SetTexture(0, NULL/*g_aPlayerPartsMat[nCntPartsSet].apTexturePlayerParts*/);

						//モデル（パーツ）の描画
						g_aPlayer.aModel[nCntPartsSet].pMesh->DrawSubset(nCntMat);
					}
					break;
				}
			}

			//保存していたマテリアルを戻す
			pDevice->SetMaterial(&matDef);
		}
	}
}

Player* GetPlayer(void)
{
	return &g_aPlayer;
}


void SetPlayerParts(D3DXVECTOR3 pos, D3DXVECTOR3 rot, int nIdx, int nType)
{
	for (int nCntPlayerParts = 0; nCntPlayerParts < MAX_PLAYERPARTS; nCntPlayerParts++)
	{
		if (g_aPlayer.aModel[nCntPlayerParts].bUse == false)
		{
			g_aPlayer.aModel[nCntPlayerParts].bUse = true;//使用しているかどうか
			g_aPlayer.aModel[nCntPlayerParts].pos = pos;//位置
			g_aPlayer.aModel[nCntPlayerParts].rot = rot;//向き
			g_aPlayer.aModel[nCntPlayerParts].nIdxModelParent = nIdx;//種類
			break;
		}
	}
}

