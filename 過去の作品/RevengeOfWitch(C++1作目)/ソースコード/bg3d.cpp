//============================================================================================================================================================
//
//６月２２日：メッシュシリンダーで3D背景を出す[bg3d.cpp]
//Author:ShinaTaiyo
//
//============================================================================================================================================================

//============================================================================================================================================================
//インクルード
//============================================================================================================================================================
#include "bg3d.h"
#include "texture.h"
#include "manager.h"
//=======================================================================================================================================================================

//============================================================================================================================================================
//コンストラクタ
//============================================================================================================================================================
CBg3D::CBg3D()
{
	m_type = (BG3DTYPE)(0);
}
//=======================================================================================================================================================================

//============================================================================================================================================================
//デストラクタ
//============================================================================================================================================================
CBg3D::~CBg3D()
{

}
//=======================================================================================================================================================================

//============================================================================================================================================================
//初期化処理
//============================================================================================================================================================
HRESULT CBg3D::Init()
{
	CMeshCylinder::Init();//メッシュシリンダーの初期化処理
	return S_OK;
}
//=======================================================================================================================================================================

//============================================================================================================================================================
//終了処理
//============================================================================================================================================================
void CBg3D::Uninit()
{
	CMeshCylinder::Uninit();//メッシュシリンダーの終了処理
}
//=======================================================================================================================================================================

//============================================================================================================================================================
//別枠の終了処理
//============================================================================================================================================================
void CBg3D::ExtraUninit()
{
}
//=======================================================================================================================================================================

//============================================================================================================================================================
//更新処理
//============================================================================================================================================================
void CBg3D::Update()
{
	CMeshCylinder::Update();//メッシュシリンダーの更新処理
}
//=======================================================================================================================================================================

//============================================================================================================================================================
//描画処理
//============================================================================================================================================================
void CBg3D::Draw()
{
	CMeshCylinder::Draw();//メッシュシリンダーの描画処理
}
//=======================================================================================================================================================================

//============================================================================================================================================================
//死亡フラグを設定
//============================================================================================================================================================
void CBg3D::SetDeath()
{
	CObject::SetDeath();
}
//=======================================================================================================================================================================

//============================================================================================================================================================
//生成処理
//============================================================================================================================================================
CBg3D * CBg3D::Create(BG3DTYPE type, D3DXVECTOR3 Pos, int nNumBlockXZ, int nNumBlockY, float fRadius, float fHeight)
{
	CBg3D* pBg3D = DBG_NEW CBg3D;                               //3D背景を生成
	CTexture* pTextureClass = CManager::GetTexture();           //テクスチャクラスを取得
	bool bSuccess = pBg3D->CObject::GetCreateSuccess();       //生成が成功したかどうかを取得する
	if (bSuccess == true)
	{//生成が成功したら
		if (pBg3D != nullptr)
		{
			pBg3D->m_type = type;                                                                       //弾の種類
			switch (type)
			{
			case BG3DTYPE_STAGE00:
				pBg3D->SetTextureIndex(pTextureClass->Regist("data\\TEXTURE\\Bg3D\\GrassField_000.jpg"));
				break;
			case BG3DTYPE_STAGE01:
				pBg3D->SetTextureIndex(pTextureClass->Regist("data\\TEXTURE\\Bg3D\\LakeField_000.png"));
				break;
			default:
				break;
			}
			pBg3D->SetUseDeath(false);                 //死亡フラグを発動するかどうかを設定する
			pBg3D->BindTexture(pTextureClass->GetAddress(pBg3D->GetTextureIndex()));                   //テクスチャをセットする　
			pBg3D->CObject::SetType(CObject::TYPE_BG3D);                                               //オブジェクトの種類を決める
			pBg3D->SetCylinderInfo(Pos, NULL_VECTOR3, nNumBlockXZ, nNumBlockY, fRadius, fHeight);      //メッシュシリンダーの情報を設定する
			pBg3D->Init();                                                                             //初期化処理
			return pBg3D;
		}
	}
	else
	{//オブジェクトに空きがなかったので破棄する
		delete pBg3D;
		pBg3D = nullptr;
		return nullptr;
	}
	return nullptr;
}
//=======================================================================================================================================================================

//============================================================================================================================================================
//3D背景の種類を設定する
//============================================================================================================================================================
void CBg3D::SetBg3DType(BG3DTYPE type)
{
	CTexture* pTextureClass = CManager::GetTexture();           //テクスチャクラスを取得
	m_type = type;
	switch (m_type)
	{
	case BG3DTYPE_STAGE00:
		SetTextureIndex(pTextureClass->Regist("data\\TEXTURE\\Bg3D\\GrassField_000.jpg"));
		break;
	case BG3DTYPE_STAGE01:
		SetTextureIndex(pTextureClass->Regist("data\\TEXTURE\\Bg3D\\LakeField_000.png"));
		break;
	default:
		break;
	}
	BindTexture(pTextureClass->GetAddress(GetTextureIndex()));                   //テクスチャをセットする　
}
//=======================================================================================================================================================================