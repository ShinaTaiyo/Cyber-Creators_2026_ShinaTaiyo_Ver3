//=============================================================================================
//
//９月４日：スコアを実装する
//Author:ShinaTaiyo
//
//=============================================================================================

//==============================================
//インクルード
//==============================================
#include "score.h"
#include "manager.h"
#include "texture.h"
#include "number.h"
//=============================================================================================

//==============================================
//コンストラクタ
//==============================================
CScore::CScore()
{

}
//=============================================================================================

//==============================================
//デストラクタ
//==============================================
CScore::~CScore()
{

}
//=============================================================================================

//==============================================
//初期化処理
//==============================================
HRESULT CScore::Init()
{
	CObject::Init();
	m_nScore = 0;//スコア
	for (int nCnt = 0; nCnt < m_nMAX_SCOREDIGIT; nCnt++)
	{
		m_pNumber[nCnt] = nullptr;//数字へのポインタ 
	}
	return S_OK;
}
//=============================================================================================

//==============================================
//終了処理
//==============================================
void CScore::Uninit()
{
	CObject::Uninit();
}
//=============================================================================================

//==============================================
//更新処理
//==============================================
void CScore::Update()
{
	//CObject2D::Update();
}
//=============================================================================================

//==============================================
//描画処理
//==============================================
void CScore::Draw()
{
	//CObject2D::Draw();
}
//=============================================================================================

//==============================================
//死亡フラグ設定処理
//==============================================
void CScore::SetDeath()
{
	bool bUseDeath = GetUseDeath();

	for (int nCnt = 0; nCnt < m_nMAX_SCOREDIGIT; nCnt++)
	{
		if (m_pNumber[nCnt] != nullptr)
		{//数字の死亡フラグ設定処理
			m_pNumber[nCnt]->SetUseDeath(true);
			m_pNumber[nCnt]->SetDeath();
			m_pNumber[nCnt] = nullptr;
		}
	}

	CObject::SetDeath();
}
//=============================================================================================

//==============================================
//生成処理
//==============================================
CScore* CScore::Create(int nInitialScore)
{
	CScore* pScore = DBG_NEW CScore;                           //弾を生成 
	bool bSuccess = pScore->CObject::GetCreateSuccess();         //生成が成功したかどうかを取得する
	if (bSuccess == true)
	{//生成が成功したら
		if (pScore != nullptr)
		{
			pScore->Init();                                                                                 //初期化処理
			pScore->SetUseDeath(false);                                                                     //死亡フラグを発動するかどうかを設定する
			pScore->CObject::SetType(CObject::TYPE_SCORE);                                                  //オブジェクトの種類を決める
			//pScore->SetTextureIndex(CManager::GetTexture()->Regist(""));       //テクスチャを割り当てる
			for (int nCnt = 0; nCnt < m_nMAX_SCOREDIGIT; nCnt++)
			{
				pScore->m_pNumber[nCnt] = CNumber::Create(D3DXVECTOR3(SCREEN_WIDTH - 40.0f - 40.0f * nCnt, SCREEN_HEIGHT - 40.0f, 0.0f),40.0f,40.0f);
			}
			//pScore->BindTexture(CManager::GetTexture()->GetAddress(pScore->GetTextureIndex()));            //テクスチャを設定する
			pScore->AddScore(nInitialScore);//スコア初期値
		}
	}
	else
	{//オブジェクトに空きがなかったので破棄する
		delete pScore;
		pScore = nullptr;
	}

	return pScore;
}
//=============================================================================================

//==============================================
//スコア加算処理
//==============================================
void CScore::AddScore(int nScore)
{
	m_nScore += nScore;
	int nTempScore = m_nScore;
	int nTexPos = 0;
	for (int nCnt = 0; nCnt < m_nMAX_SCOREDIGIT; nCnt++)
	{
		nTexPos = nTempScore % 10;
		nTempScore /= 10;

		m_pNumber[nCnt]->SetAnim(nTexPos);
	}
}
//=============================================================================================\