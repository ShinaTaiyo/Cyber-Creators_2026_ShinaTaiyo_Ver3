//========================================================
//
//１１月７日：モデル読み込み[Model.cpp]
//Author:ShinaTaiyo
//
//=========================================================

#include "model.h"
#include "main.h"
#include "input.h"
#include "sound.h"
#include "fade.h"
#include "shadow.h"
#include "player.h"
#include <stdio.h>
#include <string.h>

//グローバル変数
int g_nNumModel = 0;
#define Model_SCALE (10.0f)
#define MODELSET "data\\TEXTFILE\\model.txt"


LPD3DXMESH g_pMeshModel[NUM_MODEL] = {};//メッシュ（頂点情報）へのポインタ
LPD3DXBUFFER g_pBuffMatModel = NULL;//マテリアルへのポインタ
DWORD g_dwNumMatModel = 0;//マテリアルの数
D3DXVECTOR3 g_posModel;//位置
D3DXVECTOR3 g_rotModel;//向き
D3DXMATRIX g_mtxWorldModel;//ワールドマトリックス

Model g_aModel[MAX_MODEL];//モデル情報の構造体

int g_nldxShadow = -1;//対象の影のインデックス（番号）

//タイトル画面の初期化処理
void InitModel(void)
{

	g_nldxShadow = 0;//対象の影のインデックス

	g_nNumModel = 2;

	LPDIRECT3DDEVICE9 pDevice = GetDevice();//デバイスへのポインタと取得

	g_posModel = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	g_rotModel = D3DXVECTOR3(0.0f, 0.0f, 0.0f);

	g_nNumModel = 0;

	//モデルの読み込み
	D3DXLoadMeshFromX("data\\MODEL\\bill.x",
		D3DXMESH_SYSTEMMEM,
		pDevice,
		NULL,
		&g_pBuffMatModel,
		NULL,
		&g_dwNumMatModel,
		&g_pMeshModel[MODELTYPE_BILL]);

	D3DXLoadMeshFromX("data\\MODEL\\BigBriddge.x",
		D3DXMESH_SYSTEMMEM,
		pDevice,
		NULL,
		&g_pBuffMatModel,
		NULL,
		&g_dwNumMatModel,
		&g_pMeshModel[MODELTYPE_BRIDDGE]);




	for (int nCnt = 0; nCnt < MAX_MODEL; nCnt++)
	{
		g_aModel[nCnt].bUse = false;//使用しているかどうか
		g_aModel[nCnt].pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);//位置
		g_aModel[nCnt].rot = D3DXVECTOR3(0.0f, 0.0f, 0.0f);//向き
		g_aModel[nCnt].nIdxShadow = -1;
		g_aModel[nCnt].nType = 0;
	}


	char aString[100] = {};//文字列を読み込むための変数
	int nMaxRoadModel = 0;//読み込むモデルの最大数
	int nType = 0;//読み込んだモデルの種類

	float fPosX = 0;//モデルの位置X
	float fPosY = 0;//モデルの位置Y
	float fPosZ = 0;//モデルの位置Z

	float fRotX = 0;//モデルの位置X
	float fRotY = 0;//モデルの位置Y
	float fRotZ = 0;//モデルの位置Z

	FILE* pFile;//ファイルポインタ

	char aStringPass[100] = {};

	pFile = fopen(MODELSET, "r");

	if (pFile != NULL)//ファイルが開いているかどうか
	{
		while (1)
		{

			fscanf(pFile, "%s", &aString[0]);

			if (strcmp(&aString[0], "ENDSCRIPT") == 0)
			{
				break;//行の最後でこの文字列を判定させることにより、ループを終わらせる
			}
			//else if (strcmp(&aString[0], "NUM_MODEL") == 0)//読み込むモデルの種類数を決める
			//{
			//	fscanf(pFile, "%d", &g_nNumModel);
			//	for (int nRoadModel = 0; nRoadModel < g_nNumModel; nRoadModel++)
			//	{
			//		fscanf(pFile, "%s", &aString[0]);

			//		if (strcmp(&aString[0], "MODEL_FILENAME") == 0)
			//		{
			//			fscanf(pFile, "%s", &aStringPass[0]);
			//			//モデルの読み込み
			//			D3DXLoadMeshFromX(aStringPass,
			//				D3DXMESH_SYSTEMMEM,
			//				pDevice,
			//				NULL,
			//				&g_pBuffMatModel,
			//				NULL,
			//				&g_dwNumMatModel,
			//				&g_pMeshModel[nRoadModel]);
			//		}
			//	}
			//}
			else if (strcmp(&aString[0], "MODELSET") == 0)
			{
				while (1)
				{
					fscanf(pFile, "%s", &aString[0]);
					if (strcmp(&aString[0], "TYPE") == 0)
					{
						fscanf(pFile, "%d", &nType);//ウォールの種類を決める
					}
					else if (strcmp(&aString[0], "POS") == 0)
					{
						fscanf(pFile, "%f%f%f", &fPosX, &fPosY, &fPosZ);//位置情報を読み込む
					}
					else if (strcmp(&aString[0], "ROT") == 0)
					{
						fscanf(pFile, "%f%f%f", &fRotX, &fRotY, &fRotZ);//向き情報を読み込む
					}
					else if (strcmp(&aString[0], "ENDMODELSET") == 0)
					{
						SetModel(D3DXVECTOR3(fPosX,fPosY,fPosZ), D3DXVECTOR3(fRotX,fRotY,fRotZ),nType);
						break;
					}
				}
			}
		}
		fclose(pFile);
	}

	

	//SetModel(D3DXVECTOR3(0.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), MODELTYPE_BILL);
	//SetModel(D3DXVECTOR3(100.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), MODELTYPE_BILL);
	//SetModel(D3DXVECTOR3(10.0f, 0.0f, 50.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), MODELTYPE_BILL);
	//SetModel(D3DXVECTOR3(-100.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), MODELTYPE_BRIDDGE);
	//SetModel(D3DXVECTOR3(-500.0f, 0.0f, 0.0f), D3DXVECTOR3(0.0f, 0.0f, 0.0f), MODELTYPE_BRIDDGE);





}

//==============================
//タイトル画面の終了処理
//==============================
void UninitModel(void)
{
	for (int nCnt = 0; nCnt < g_nNumModel; nCnt++)
	{
		//メッシュの破棄
		if (g_pMeshModel != NULL)
		{
			g_pMeshModel[nCnt]->Release();
			g_pMeshModel[nCnt] = NULL;
		}
	}
	//マテリアルの破棄
	if (g_pBuffMatModel != NULL)
	{
		g_pBuffMatModel->Release();
		g_pBuffMatModel = NULL;
	}
}
//============================
//モデルの更新処理
//============================
void UpdateModel(void)
{
	float fLength = 0.0f;
	for (int nCnt = 0; nCnt < MAX_MODEL; nCnt++)
	{
		if (g_aModel[nCnt].bUse == true)
		{
			Player* pPlayer = GetPlayer();
			
			fLength = sqrtf((g_aModel[nCnt].pos.x - pPlayer->pos.x) * (g_aModel[nCnt].pos.x - pPlayer->pos.x) +
				(g_aModel[nCnt].pos.z - pPlayer->pos.z) * (g_aModel[nCnt].pos.z - pPlayer->pos.z) + 
					(g_aModel[nCnt].pos.y - pPlayer->pos.y) * (g_aModel[nCnt].pos.y - pPlayer->pos.y)) / 3;

			if (fLength <= 20.0f)
			{
				pPlayer->pos = pPlayer->posOld;
			}

		//影の位置を設定
			SetPositionShadow(g_aModel[nCnt].nIdxShadow, g_aModel[nCnt].pos,-1);
		}
	}
}

//================================
//タイトル画面の描画処理
//================================
void DrawModel(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();;//デバイスへのポインタと取得


	for (int nCntModel = 0; nCntModel < MAX_MODEL; nCntModel++)
	{
		if (g_aModel[nCntModel].bUse == true)
		{
			D3DXMATRIX mtxRot, mtxTrans;//計算用マトリックス

			D3DMATERIAL9 matDef;//現在のマテリアル保存用

			D3DXMATERIAL* pMat;//マテリアルデータへのポインタ

			//ワールドマトリックスの初期化
			D3DXMatrixIdentity(&g_mtxWorldModel);

			//向きを反映
			D3DXMatrixRotationYawPitchRoll(&mtxRot, g_aModel[nCntModel].rot.y, g_aModel[nCntModel].rot.x, g_aModel[nCntModel].rot.z);

			D3DXMatrixMultiply(&g_mtxWorldModel, &g_mtxWorldModel, &mtxRot);

			//位置を反映
			D3DXMatrixTranslation(&mtxTrans, g_aModel[nCntModel].pos.x, g_aModel[nCntModel].pos.y, g_aModel[nCntModel].pos.z);
			D3DXMatrixMultiply(&g_mtxWorldModel, &g_mtxWorldModel, &mtxTrans);

			//ワールドマトリックスの設定
			pDevice->SetTransform(D3DTS_WORLD, &g_mtxWorldModel);

			//現在のマテリアルを取得
			pDevice->GetMaterial(&matDef);

			//マテリアルへのポインタを取得
			pMat = (D3DXMATERIAL*)g_pBuffMatModel->GetBufferPointer();

			for (int nCntMat = 0; nCntMat < (int)g_dwNumMatModel; nCntMat++)
			{
				//マテリアルの設定
				pDevice->SetMaterial(&pMat[nCntMat].MatD3D);

				//テクスチャの設定
				pDevice->SetTexture(0, NULL);

			//モデル（パーツ）の描画
			/*	if (g_aModel[nCntModel].nType == MODELTYPE_BILL)
				{
					g_pMeshModel[MODELTYPE_BILL]->DrawSubset(nCntMat);
				}
				else if (g_aModel[nCntModel].nType == MODELTYPE_BRIDDGE)
				{
					g_pMeshModel[MODELTYPE_BRIDDGE]->DrawSubset(nCntMat);
				}*/

				for (int nCntModelSet = 0; nCntModelSet < NUM_MODEL; nCntModelSet++)
				{
					if (g_aModel[nCntModel].nType == nCntModelSet)
					{
						g_pMeshModel[nCntModelSet]->DrawSubset(nCntMat);
						break;
					}
				}
			}

			//保存していたマテリアルを戻す
			pDevice->SetMaterial(&matDef);
		}
	}
}

void SetModel(D3DXVECTOR3 pos, D3DXVECTOR3 rot, int nType)
{
	for (int nCntModel = 0; nCntModel < MAX_MODEL; nCntModel++)
	{
		if (g_aModel[nCntModel].bUse == false)
		{
			g_aModel[nCntModel].bUse = true;//使用しているかどうか
			g_aModel[nCntModel].pos = pos;//位置
			g_aModel[nCntModel].rot = rot;//向き
			g_aModel[nCntModel].nType = nType;//種類
			g_aModel[nCntModel].nIdxShadow = SetShadow();//影のインデックスを設定
			break;
		}
	}
}
