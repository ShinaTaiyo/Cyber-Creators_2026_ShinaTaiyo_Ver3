//========================================================
//
//８月３０日：エフェクトもう一回見直す[fade.cpp]
//Author:ShinaTaiyo
//
//=========================================================
#include "fade.h"
#include "sound.h"
//=======================================================================================================================================================================================================================
// グローバル変数
//=======================================================================================================================================================================================================================
LPDIRECT3DTEXTURE9 g_pTextureFade = NULL;		//テクスチャへのポインタ
LPDIRECT3DVERTEXBUFFER9 g_pVtxBuffFade = NULL;	//頂点バッファへのポインタ
FADE g_fade;									//フェード画面の情報
MODE g_modeNext;								//モード取得用
int g_colorFade;								//フェード明るさ

//=======================================================================================================================================================================================================================
// 初期化処理
//=======================================================================================================================================================================================================================
void InitFade(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();	//デバイスの取得
	VERTEX_2D* pVtx;							//頂点情報へのポインタ

	//テクスチャの読みこみ
	D3DXCreateTextureFromFile(pDevice,
		"",
		&g_pTextureFade);

	//頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&g_pVtxBuffFade, NULL);

	//変数
	g_colorFade = 255;	//フェード明るさ
	g_fade = FADE_IN;	//フェード状態

	//頂点バッファをロックし、頂点情報へのポインタを取得
	g_pVtxBuffFade->Lock(0, 0, (void**)&pVtx, 0);

	//頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(SCREEN_WIDTH, 0.0f, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(0.0f, SCREEN_HEIGHT, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(SCREEN_WIDTH, SCREEN_HEIGHT, 0.0f);

	//rhwの設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	//頂点カラーの設定
	pVtx[0].col = D3DCOLOR_RGBA(255, 255, 255, g_colorFade);
	pVtx[1].col = D3DCOLOR_RGBA(255, 255, 255, g_colorFade);
	pVtx[2].col = D3DCOLOR_RGBA(255, 255, 255, g_colorFade);
	pVtx[3].col = D3DCOLOR_RGBA(255, 255, 255, g_colorFade);

	//テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	//頂点バッファをアンロックする
	g_pVtxBuffFade->Unlock();
}

//=======================================================================================================================================================================================================================
// 終了処理
//=======================================================================================================================================================================================================================
void UninitFade(void)
{
	//テクスチャの破棄
	if (g_pTextureFade != NULL)
	{
		g_pTextureFade->Release();
		g_pTextureFade = NULL;
	}

	//頂点バッファの破棄
	if (g_pVtxBuffFade != NULL)
	{
		g_pVtxBuffFade->Release();
		g_pVtxBuffFade = NULL;
	}
}

//=======================================================================================================================================================================================================================
// 更新処理
//=======================================================================================================================================================================================================================
void UpdateFade(void)
{
	VERTEX_2D* pVtx;	//頂点情報へのポインタ

	//フェードイン
	if (g_fade == FADE_IN)
	{
		g_colorFade -= FADE_SPEED;	//ポリゴンを透明にしていく

		//明るさ最小
		if (g_colorFade <= 0)
		{
			g_colorFade = 0;
			g_fade = FADE_NONE;   //フェードしていない
		}
	}

	//フェードアウト
	else if (g_fade == FADE_OUT)
	{
		g_colorFade += FADE_SPEED;    //ポリゴンを不透明にする

		//明るさ最大
		if (g_colorFade >= 255)
		{
			g_colorFade = 255;
			g_fade = FADE_IN;	//フェードイン

			SetMode(g_modeNext);	//次の画面へ移行
		}
	}

	//頂点バッファをロックし、頂点情報へのポインタを取得
	g_pVtxBuffFade->Lock(0, 0, (void**)&pVtx, 0);

	//頂点カラーの更新
	pVtx[0].col = D3DCOLOR_RGBA(0,0,0,g_colorFade);
	pVtx[1].col = D3DCOLOR_RGBA(0,0,0,g_colorFade);
	pVtx[2].col = D3DCOLOR_RGBA(0,0,0,g_colorFade);
	pVtx[3].col = D3DCOLOR_RGBA(0,0,0,g_colorFade);

	//頂点バッファをアンロックする
	g_pVtxBuffFade->Unlock();
}

//=======================================================================================================================================================================================================================
// 描画処理
//=======================================================================================================================================================================================================================
void DrawFade(void)
{
	LPDIRECT3DDEVICE9 pDevice = GetDevice();							//デバイスの取得
	pDevice->SetStreamSource(0, g_pVtxBuffFade, 0, sizeof(VERTEX_2D));	//頂点バッファをデータストリームに設定
	pDevice->SetFVF(FVF_VERTEX_2D);										//頂点フォーマットの設定
	pDevice->SetTexture(0, g_pTextureFade);								//テクスチャの設定
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);					//ポリゴンの描画
}

//=======================================================================================================================================================================================================================
// 設定処理
//=======================================================================================================================================================================================================================
void SetFade(MODE modeNext)
{
	//次の画面へ移行
	g_modeNext = modeNext;
	g_fade = FADE_OUT;	//フェードアウト
}

//=======================================================================================================================================================================================================================
// 状態の取得
//=======================================================================================================================================================================================================================
FADE GetFade(void)
{
	return g_fade;
}
